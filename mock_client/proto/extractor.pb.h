// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extractor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_extractor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_extractor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_extractor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_extractor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extractor_2eproto;
namespace extractor {
class AllDataResponse;
struct AllDataResponseDefaultTypeInternal;
extern AllDataResponseDefaultTypeInternal _AllDataResponse_default_instance_;
class AllDataSend;
struct AllDataSendDefaultTypeInternal;
extern AllDataSendDefaultTypeInternal _AllDataSend_default_instance_;
class FlightRow;
struct FlightRowDefaultTypeInternal;
extern FlightRowDefaultTypeInternal _FlightRow_default_instance_;
class PesquisaRow;
struct PesquisaRowDefaultTypeInternal;
extern PesquisaRowDefaultTypeInternal _PesquisaRow_default_instance_;
class ReservaRow;
struct ReservaRowDefaultTypeInternal;
extern ReservaRowDefaultTypeInternal _ReservaRow_default_instance_;
}  // namespace extractor
PROTOBUF_NAMESPACE_OPEN
template<> ::extractor::AllDataResponse* Arena::CreateMaybeMessage<::extractor::AllDataResponse>(Arena*);
template<> ::extractor::AllDataSend* Arena::CreateMaybeMessage<::extractor::AllDataSend>(Arena*);
template<> ::extractor::FlightRow* Arena::CreateMaybeMessage<::extractor::FlightRow>(Arena*);
template<> ::extractor::PesquisaRow* Arena::CreateMaybeMessage<::extractor::PesquisaRow>(Arena*);
template<> ::extractor::ReservaRow* Arena::CreateMaybeMessage<::extractor::ReservaRow>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace extractor {

// ===================================================================

class FlightRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:extractor.FlightRow) */ {
 public:
  inline FlightRow() : FlightRow(nullptr) {}
  ~FlightRow() override;
  explicit PROTOBUF_CONSTEXPR FlightRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlightRow(const FlightRow& from);
  FlightRow(FlightRow&& from) noexcept
    : FlightRow() {
    *this = ::std::move(from);
  }

  inline FlightRow& operator=(const FlightRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlightRow& operator=(FlightRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlightRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlightRow* internal_default_instance() {
    return reinterpret_cast<const FlightRow*>(
               &_FlightRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlightRow& a, FlightRow& b) {
    a.Swap(&b);
  }
  inline void Swap(FlightRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlightRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlightRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlightRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlightRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlightRow& from) {
    FlightRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extractor.FlightRow";
  }
  protected:
  explicit FlightRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidadeOrigemFieldNumber = 1,
    kCidadeDestinoFieldNumber = 2,
    kAssentosOcupadosFieldNumber = 3,
    kAssentosTotaisFieldNumber = 4,
    kAssentosDisponiveisFieldNumber = 5,
    kDiaFieldNumber = 6,
    kMesFieldNumber = 7,
    kAnoFieldNumber = 8,
  };
  // string cidade_origem = 1;
  void clear_cidade_origem();
  const std::string& cidade_origem() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cidade_origem(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cidade_origem();
  PROTOBUF_NODISCARD std::string* release_cidade_origem();
  void set_allocated_cidade_origem(std::string* cidade_origem);
  private:
  const std::string& _internal_cidade_origem() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cidade_origem(const std::string& value);
  std::string* _internal_mutable_cidade_origem();
  public:

  // string cidade_destino = 2;
  void clear_cidade_destino();
  const std::string& cidade_destino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cidade_destino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cidade_destino();
  PROTOBUF_NODISCARD std::string* release_cidade_destino();
  void set_allocated_cidade_destino(std::string* cidade_destino);
  private:
  const std::string& _internal_cidade_destino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cidade_destino(const std::string& value);
  std::string* _internal_mutable_cidade_destino();
  public:

  // int32 assentos_ocupados = 3;
  void clear_assentos_ocupados();
  int32_t assentos_ocupados() const;
  void set_assentos_ocupados(int32_t value);
  private:
  int32_t _internal_assentos_ocupados() const;
  void _internal_set_assentos_ocupados(int32_t value);
  public:

  // int32 assentos_totais = 4;
  void clear_assentos_totais();
  int32_t assentos_totais() const;
  void set_assentos_totais(int32_t value);
  private:
  int32_t _internal_assentos_totais() const;
  void _internal_set_assentos_totais(int32_t value);
  public:

  // int32 assentos_disponiveis = 5;
  void clear_assentos_disponiveis();
  int32_t assentos_disponiveis() const;
  void set_assentos_disponiveis(int32_t value);
  private:
  int32_t _internal_assentos_disponiveis() const;
  void _internal_set_assentos_disponiveis(int32_t value);
  public:

  // int32 dia = 6;
  void clear_dia();
  int32_t dia() const;
  void set_dia(int32_t value);
  private:
  int32_t _internal_dia() const;
  void _internal_set_dia(int32_t value);
  public:

  // int32 mes = 7;
  void clear_mes();
  int32_t mes() const;
  void set_mes(int32_t value);
  private:
  int32_t _internal_mes() const;
  void _internal_set_mes(int32_t value);
  public:

  // int32 ano = 8;
  void clear_ano();
  int32_t ano() const;
  void set_ano(int32_t value);
  private:
  int32_t _internal_ano() const;
  void _internal_set_ano(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:extractor.FlightRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidade_origem_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidade_destino_;
    int32_t assentos_ocupados_;
    int32_t assentos_totais_;
    int32_t assentos_disponiveis_;
    int32_t dia_;
    int32_t mes_;
    int32_t ano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extractor_2eproto;
};
// -------------------------------------------------------------------

class ReservaRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:extractor.ReservaRow) */ {
 public:
  inline ReservaRow() : ReservaRow(nullptr) {}
  ~ReservaRow() override;
  explicit PROTOBUF_CONSTEXPR ReservaRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReservaRow(const ReservaRow& from);
  ReservaRow(ReservaRow&& from) noexcept
    : ReservaRow() {
    *this = ::std::move(from);
  }

  inline ReservaRow& operator=(const ReservaRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReservaRow& operator=(ReservaRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReservaRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReservaRow* internal_default_instance() {
    return reinterpret_cast<const ReservaRow*>(
               &_ReservaRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReservaRow& a, ReservaRow& b) {
    a.Swap(&b);
  }
  inline void Swap(ReservaRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReservaRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReservaRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReservaRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReservaRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReservaRow& from) {
    ReservaRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReservaRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extractor.ReservaRow";
  }
  protected:
  explicit ReservaRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipoQuartoFieldNumber = 1,
    kNomeHotelFieldNumber = 2,
    kCidadeDestinoFieldNumber = 3,
    kNumeroQuartoFieldNumber = 4,
    kQuantidadePessoasFieldNumber = 5,
    kPrecoFieldNumber = 6,
    kOcupadoFieldNumber = 7,
    kDataIdaDiaFieldNumber = 8,
    kDataIdaMesFieldNumber = 9,
    kDataIdaAnoFieldNumber = 10,
  };
  // string tipo_quarto = 1;
  void clear_tipo_quarto();
  const std::string& tipo_quarto() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tipo_quarto(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tipo_quarto();
  PROTOBUF_NODISCARD std::string* release_tipo_quarto();
  void set_allocated_tipo_quarto(std::string* tipo_quarto);
  private:
  const std::string& _internal_tipo_quarto() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tipo_quarto(const std::string& value);
  std::string* _internal_mutable_tipo_quarto();
  public:

  // string nome_hotel = 2;
  void clear_nome_hotel();
  const std::string& nome_hotel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nome_hotel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nome_hotel();
  PROTOBUF_NODISCARD std::string* release_nome_hotel();
  void set_allocated_nome_hotel(std::string* nome_hotel);
  private:
  const std::string& _internal_nome_hotel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nome_hotel(const std::string& value);
  std::string* _internal_mutable_nome_hotel();
  public:

  // string cidade_destino = 3;
  void clear_cidade_destino();
  const std::string& cidade_destino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cidade_destino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cidade_destino();
  PROTOBUF_NODISCARD std::string* release_cidade_destino();
  void set_allocated_cidade_destino(std::string* cidade_destino);
  private:
  const std::string& _internal_cidade_destino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cidade_destino(const std::string& value);
  std::string* _internal_mutable_cidade_destino();
  public:

  // int32 numero_quarto = 4;
  void clear_numero_quarto();
  int32_t numero_quarto() const;
  void set_numero_quarto(int32_t value);
  private:
  int32_t _internal_numero_quarto() const;
  void _internal_set_numero_quarto(int32_t value);
  public:

  // int32 quantidade_pessoas = 5;
  void clear_quantidade_pessoas();
  int32_t quantidade_pessoas() const;
  void set_quantidade_pessoas(int32_t value);
  private:
  int32_t _internal_quantidade_pessoas() const;
  void _internal_set_quantidade_pessoas(int32_t value);
  public:

  // float preco = 6;
  void clear_preco();
  float preco() const;
  void set_preco(float value);
  private:
  float _internal_preco() const;
  void _internal_set_preco(float value);
  public:

  // bool ocupado = 7;
  void clear_ocupado();
  bool ocupado() const;
  void set_ocupado(bool value);
  private:
  bool _internal_ocupado() const;
  void _internal_set_ocupado(bool value);
  public:

  // int32 data_ida_dia = 8;
  void clear_data_ida_dia();
  int32_t data_ida_dia() const;
  void set_data_ida_dia(int32_t value);
  private:
  int32_t _internal_data_ida_dia() const;
  void _internal_set_data_ida_dia(int32_t value);
  public:

  // int32 data_ida_mes = 9;
  void clear_data_ida_mes();
  int32_t data_ida_mes() const;
  void set_data_ida_mes(int32_t value);
  private:
  int32_t _internal_data_ida_mes() const;
  void _internal_set_data_ida_mes(int32_t value);
  public:

  // int32 data_ida_ano = 10;
  void clear_data_ida_ano();
  int32_t data_ida_ano() const;
  void set_data_ida_ano(int32_t value);
  private:
  int32_t _internal_data_ida_ano() const;
  void _internal_set_data_ida_ano(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:extractor.ReservaRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tipo_quarto_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nome_hotel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidade_destino_;
    int32_t numero_quarto_;
    int32_t quantidade_pessoas_;
    float preco_;
    bool ocupado_;
    int32_t data_ida_dia_;
    int32_t data_ida_mes_;
    int32_t data_ida_ano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extractor_2eproto;
};
// -------------------------------------------------------------------

class PesquisaRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:extractor.PesquisaRow) */ {
 public:
  inline PesquisaRow() : PesquisaRow(nullptr) {}
  ~PesquisaRow() override;
  explicit PROTOBUF_CONSTEXPR PesquisaRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PesquisaRow(const PesquisaRow& from);
  PesquisaRow(PesquisaRow&& from) noexcept
    : PesquisaRow() {
    *this = ::std::move(from);
  }

  inline PesquisaRow& operator=(const PesquisaRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline PesquisaRow& operator=(PesquisaRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PesquisaRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const PesquisaRow* internal_default_instance() {
    return reinterpret_cast<const PesquisaRow*>(
               &_PesquisaRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PesquisaRow& a, PesquisaRow& b) {
    a.Swap(&b);
  }
  inline void Swap(PesquisaRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PesquisaRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PesquisaRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PesquisaRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PesquisaRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PesquisaRow& from) {
    PesquisaRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PesquisaRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extractor.PesquisaRow";
  }
  protected:
  explicit PesquisaRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidadeOrigemFieldNumber = 1,
    kCidadeDestinoFieldNumber = 2,
    kNomeHotelFieldNumber = 3,
    kDataIdaDiaFieldNumber = 4,
    kDataIdaMesFieldNumber = 5,
    kDataIdaAnoFieldNumber = 6,
    kDataVoltaDiaFieldNumber = 7,
    kDataVoltaMesFieldNumber = 8,
    kDataVoltaAnoFieldNumber = 9,
  };
  // string cidade_origem = 1;
  void clear_cidade_origem();
  const std::string& cidade_origem() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cidade_origem(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cidade_origem();
  PROTOBUF_NODISCARD std::string* release_cidade_origem();
  void set_allocated_cidade_origem(std::string* cidade_origem);
  private:
  const std::string& _internal_cidade_origem() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cidade_origem(const std::string& value);
  std::string* _internal_mutable_cidade_origem();
  public:

  // string cidade_destino = 2;
  void clear_cidade_destino();
  const std::string& cidade_destino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cidade_destino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cidade_destino();
  PROTOBUF_NODISCARD std::string* release_cidade_destino();
  void set_allocated_cidade_destino(std::string* cidade_destino);
  private:
  const std::string& _internal_cidade_destino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cidade_destino(const std::string& value);
  std::string* _internal_mutable_cidade_destino();
  public:

  // string nome_hotel = 3;
  void clear_nome_hotel();
  const std::string& nome_hotel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nome_hotel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nome_hotel();
  PROTOBUF_NODISCARD std::string* release_nome_hotel();
  void set_allocated_nome_hotel(std::string* nome_hotel);
  private:
  const std::string& _internal_nome_hotel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nome_hotel(const std::string& value);
  std::string* _internal_mutable_nome_hotel();
  public:

  // int32 data_ida_dia = 4;
  void clear_data_ida_dia();
  int32_t data_ida_dia() const;
  void set_data_ida_dia(int32_t value);
  private:
  int32_t _internal_data_ida_dia() const;
  void _internal_set_data_ida_dia(int32_t value);
  public:

  // int32 data_ida_mes = 5;
  void clear_data_ida_mes();
  int32_t data_ida_mes() const;
  void set_data_ida_mes(int32_t value);
  private:
  int32_t _internal_data_ida_mes() const;
  void _internal_set_data_ida_mes(int32_t value);
  public:

  // int32 data_ida_ano = 6;
  void clear_data_ida_ano();
  int32_t data_ida_ano() const;
  void set_data_ida_ano(int32_t value);
  private:
  int32_t _internal_data_ida_ano() const;
  void _internal_set_data_ida_ano(int32_t value);
  public:

  // int32 data_volta_dia = 7;
  void clear_data_volta_dia();
  int32_t data_volta_dia() const;
  void set_data_volta_dia(int32_t value);
  private:
  int32_t _internal_data_volta_dia() const;
  void _internal_set_data_volta_dia(int32_t value);
  public:

  // int32 data_volta_mes = 8;
  void clear_data_volta_mes();
  int32_t data_volta_mes() const;
  void set_data_volta_mes(int32_t value);
  private:
  int32_t _internal_data_volta_mes() const;
  void _internal_set_data_volta_mes(int32_t value);
  public:

  // int32 data_volta_ano = 9;
  void clear_data_volta_ano();
  int32_t data_volta_ano() const;
  void set_data_volta_ano(int32_t value);
  private:
  int32_t _internal_data_volta_ano() const;
  void _internal_set_data_volta_ano(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:extractor.PesquisaRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidade_origem_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidade_destino_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nome_hotel_;
    int32_t data_ida_dia_;
    int32_t data_ida_mes_;
    int32_t data_ida_ano_;
    int32_t data_volta_dia_;
    int32_t data_volta_mes_;
    int32_t data_volta_ano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extractor_2eproto;
};
// -------------------------------------------------------------------

class AllDataSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:extractor.AllDataSend) */ {
 public:
  inline AllDataSend() : AllDataSend(nullptr) {}
  ~AllDataSend() override;
  explicit PROTOBUF_CONSTEXPR AllDataSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllDataSend(const AllDataSend& from);
  AllDataSend(AllDataSend&& from) noexcept
    : AllDataSend() {
    *this = ::std::move(from);
  }

  inline AllDataSend& operator=(const AllDataSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllDataSend& operator=(AllDataSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllDataSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllDataSend* internal_default_instance() {
    return reinterpret_cast<const AllDataSend*>(
               &_AllDataSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AllDataSend& a, AllDataSend& b) {
    a.Swap(&b);
  }
  inline void Swap(AllDataSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllDataSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllDataSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllDataSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllDataSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllDataSend& from) {
    AllDataSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllDataSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extractor.AllDataSend";
  }
  protected:
  explicit AllDataSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoosFieldNumber = 1,
    kReservasFieldNumber = 2,
    kPesquisasFieldNumber = 3,
  };
  // string voos = 1;
  void clear_voos();
  const std::string& voos() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_voos(ArgT0&& arg0, ArgT... args);
  std::string* mutable_voos();
  PROTOBUF_NODISCARD std::string* release_voos();
  void set_allocated_voos(std::string* voos);
  private:
  const std::string& _internal_voos() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voos(const std::string& value);
  std::string* _internal_mutable_voos();
  public:

  // string reservas = 2;
  void clear_reservas();
  const std::string& reservas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reservas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reservas();
  PROTOBUF_NODISCARD std::string* release_reservas();
  void set_allocated_reservas(std::string* reservas);
  private:
  const std::string& _internal_reservas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reservas(const std::string& value);
  std::string* _internal_mutable_reservas();
  public:

  // string pesquisas = 3;
  void clear_pesquisas();
  const std::string& pesquisas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pesquisas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pesquisas();
  PROTOBUF_NODISCARD std::string* release_pesquisas();
  void set_allocated_pesquisas(std::string* pesquisas);
  private:
  const std::string& _internal_pesquisas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pesquisas(const std::string& value);
  std::string* _internal_mutable_pesquisas();
  public:

  // @@protoc_insertion_point(class_scope:extractor.AllDataSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reservas_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pesquisas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extractor_2eproto;
};
// -------------------------------------------------------------------

class AllDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:extractor.AllDataResponse) */ {
 public:
  inline AllDataResponse() : AllDataResponse(nullptr) {}
  ~AllDataResponse() override;
  explicit PROTOBUF_CONSTEXPR AllDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllDataResponse(const AllDataResponse& from);
  AllDataResponse(AllDataResponse&& from) noexcept
    : AllDataResponse() {
    *this = ::std::move(from);
  }

  inline AllDataResponse& operator=(const AllDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllDataResponse& operator=(AllDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllDataResponse* internal_default_instance() {
    return reinterpret_cast<const AllDataResponse*>(
               &_AllDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AllDataResponse& a, AllDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AllDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllDataResponse& from) {
    AllDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extractor.AllDataResponse";
  }
  protected:
  explicit AllDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStats1FieldNumber = 1,
    kStats2FieldNumber = 2,
    kStats3FieldNumber = 3,
    kStats4FieldNumber = 4,
    kStats5FieldNumber = 5,
  };
  // int32 stats1 = 1;
  void clear_stats1();
  int32_t stats1() const;
  void set_stats1(int32_t value);
  private:
  int32_t _internal_stats1() const;
  void _internal_set_stats1(int32_t value);
  public:

  // int32 stats2 = 2;
  void clear_stats2();
  int32_t stats2() const;
  void set_stats2(int32_t value);
  private:
  int32_t _internal_stats2() const;
  void _internal_set_stats2(int32_t value);
  public:

  // int32 stats3 = 3;
  void clear_stats3();
  int32_t stats3() const;
  void set_stats3(int32_t value);
  private:
  int32_t _internal_stats3() const;
  void _internal_set_stats3(int32_t value);
  public:

  // int32 stats4 = 4;
  void clear_stats4();
  int32_t stats4() const;
  void set_stats4(int32_t value);
  private:
  int32_t _internal_stats4() const;
  void _internal_set_stats4(int32_t value);
  public:

  // int32 stats5 = 5;
  void clear_stats5();
  int32_t stats5() const;
  void set_stats5(int32_t value);
  private:
  int32_t _internal_stats5() const;
  void _internal_set_stats5(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:extractor.AllDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t stats1_;
    int32_t stats2_;
    int32_t stats3_;
    int32_t stats4_;
    int32_t stats5_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extractor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlightRow

// string cidade_origem = 1;
inline void FlightRow::clear_cidade_origem() {
  _impl_.cidade_origem_.ClearToEmpty();
}
inline const std::string& FlightRow::cidade_origem() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.cidade_origem)
  return _internal_cidade_origem();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightRow::set_cidade_origem(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cidade_origem_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.FlightRow.cidade_origem)
}
inline std::string* FlightRow::mutable_cidade_origem() {
  std::string* _s = _internal_mutable_cidade_origem();
  // @@protoc_insertion_point(field_mutable:extractor.FlightRow.cidade_origem)
  return _s;
}
inline const std::string& FlightRow::_internal_cidade_origem() const {
  return _impl_.cidade_origem_.Get();
}
inline void FlightRow::_internal_set_cidade_origem(const std::string& value) {
  
  _impl_.cidade_origem_.Set(value, GetArenaForAllocation());
}
inline std::string* FlightRow::_internal_mutable_cidade_origem() {
  
  return _impl_.cidade_origem_.Mutable(GetArenaForAllocation());
}
inline std::string* FlightRow::release_cidade_origem() {
  // @@protoc_insertion_point(field_release:extractor.FlightRow.cidade_origem)
  return _impl_.cidade_origem_.Release();
}
inline void FlightRow::set_allocated_cidade_origem(std::string* cidade_origem) {
  if (cidade_origem != nullptr) {
    
  } else {
    
  }
  _impl_.cidade_origem_.SetAllocated(cidade_origem, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cidade_origem_.IsDefault()) {
    _impl_.cidade_origem_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.FlightRow.cidade_origem)
}

// string cidade_destino = 2;
inline void FlightRow::clear_cidade_destino() {
  _impl_.cidade_destino_.ClearToEmpty();
}
inline const std::string& FlightRow::cidade_destino() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.cidade_destino)
  return _internal_cidade_destino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightRow::set_cidade_destino(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cidade_destino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.FlightRow.cidade_destino)
}
inline std::string* FlightRow::mutable_cidade_destino() {
  std::string* _s = _internal_mutable_cidade_destino();
  // @@protoc_insertion_point(field_mutable:extractor.FlightRow.cidade_destino)
  return _s;
}
inline const std::string& FlightRow::_internal_cidade_destino() const {
  return _impl_.cidade_destino_.Get();
}
inline void FlightRow::_internal_set_cidade_destino(const std::string& value) {
  
  _impl_.cidade_destino_.Set(value, GetArenaForAllocation());
}
inline std::string* FlightRow::_internal_mutable_cidade_destino() {
  
  return _impl_.cidade_destino_.Mutable(GetArenaForAllocation());
}
inline std::string* FlightRow::release_cidade_destino() {
  // @@protoc_insertion_point(field_release:extractor.FlightRow.cidade_destino)
  return _impl_.cidade_destino_.Release();
}
inline void FlightRow::set_allocated_cidade_destino(std::string* cidade_destino) {
  if (cidade_destino != nullptr) {
    
  } else {
    
  }
  _impl_.cidade_destino_.SetAllocated(cidade_destino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cidade_destino_.IsDefault()) {
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.FlightRow.cidade_destino)
}

// int32 assentos_ocupados = 3;
inline void FlightRow::clear_assentos_ocupados() {
  _impl_.assentos_ocupados_ = 0;
}
inline int32_t FlightRow::_internal_assentos_ocupados() const {
  return _impl_.assentos_ocupados_;
}
inline int32_t FlightRow::assentos_ocupados() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.assentos_ocupados)
  return _internal_assentos_ocupados();
}
inline void FlightRow::_internal_set_assentos_ocupados(int32_t value) {
  
  _impl_.assentos_ocupados_ = value;
}
inline void FlightRow::set_assentos_ocupados(int32_t value) {
  _internal_set_assentos_ocupados(value);
  // @@protoc_insertion_point(field_set:extractor.FlightRow.assentos_ocupados)
}

// int32 assentos_totais = 4;
inline void FlightRow::clear_assentos_totais() {
  _impl_.assentos_totais_ = 0;
}
inline int32_t FlightRow::_internal_assentos_totais() const {
  return _impl_.assentos_totais_;
}
inline int32_t FlightRow::assentos_totais() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.assentos_totais)
  return _internal_assentos_totais();
}
inline void FlightRow::_internal_set_assentos_totais(int32_t value) {
  
  _impl_.assentos_totais_ = value;
}
inline void FlightRow::set_assentos_totais(int32_t value) {
  _internal_set_assentos_totais(value);
  // @@protoc_insertion_point(field_set:extractor.FlightRow.assentos_totais)
}

// int32 assentos_disponiveis = 5;
inline void FlightRow::clear_assentos_disponiveis() {
  _impl_.assentos_disponiveis_ = 0;
}
inline int32_t FlightRow::_internal_assentos_disponiveis() const {
  return _impl_.assentos_disponiveis_;
}
inline int32_t FlightRow::assentos_disponiveis() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.assentos_disponiveis)
  return _internal_assentos_disponiveis();
}
inline void FlightRow::_internal_set_assentos_disponiveis(int32_t value) {
  
  _impl_.assentos_disponiveis_ = value;
}
inline void FlightRow::set_assentos_disponiveis(int32_t value) {
  _internal_set_assentos_disponiveis(value);
  // @@protoc_insertion_point(field_set:extractor.FlightRow.assentos_disponiveis)
}

// int32 dia = 6;
inline void FlightRow::clear_dia() {
  _impl_.dia_ = 0;
}
inline int32_t FlightRow::_internal_dia() const {
  return _impl_.dia_;
}
inline int32_t FlightRow::dia() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.dia)
  return _internal_dia();
}
inline void FlightRow::_internal_set_dia(int32_t value) {
  
  _impl_.dia_ = value;
}
inline void FlightRow::set_dia(int32_t value) {
  _internal_set_dia(value);
  // @@protoc_insertion_point(field_set:extractor.FlightRow.dia)
}

// int32 mes = 7;
inline void FlightRow::clear_mes() {
  _impl_.mes_ = 0;
}
inline int32_t FlightRow::_internal_mes() const {
  return _impl_.mes_;
}
inline int32_t FlightRow::mes() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.mes)
  return _internal_mes();
}
inline void FlightRow::_internal_set_mes(int32_t value) {
  
  _impl_.mes_ = value;
}
inline void FlightRow::set_mes(int32_t value) {
  _internal_set_mes(value);
  // @@protoc_insertion_point(field_set:extractor.FlightRow.mes)
}

// int32 ano = 8;
inline void FlightRow::clear_ano() {
  _impl_.ano_ = 0;
}
inline int32_t FlightRow::_internal_ano() const {
  return _impl_.ano_;
}
inline int32_t FlightRow::ano() const {
  // @@protoc_insertion_point(field_get:extractor.FlightRow.ano)
  return _internal_ano();
}
inline void FlightRow::_internal_set_ano(int32_t value) {
  
  _impl_.ano_ = value;
}
inline void FlightRow::set_ano(int32_t value) {
  _internal_set_ano(value);
  // @@protoc_insertion_point(field_set:extractor.FlightRow.ano)
}

// -------------------------------------------------------------------

// ReservaRow

// string tipo_quarto = 1;
inline void ReservaRow::clear_tipo_quarto() {
  _impl_.tipo_quarto_.ClearToEmpty();
}
inline const std::string& ReservaRow::tipo_quarto() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.tipo_quarto)
  return _internal_tipo_quarto();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReservaRow::set_tipo_quarto(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tipo_quarto_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.tipo_quarto)
}
inline std::string* ReservaRow::mutable_tipo_quarto() {
  std::string* _s = _internal_mutable_tipo_quarto();
  // @@protoc_insertion_point(field_mutable:extractor.ReservaRow.tipo_quarto)
  return _s;
}
inline const std::string& ReservaRow::_internal_tipo_quarto() const {
  return _impl_.tipo_quarto_.Get();
}
inline void ReservaRow::_internal_set_tipo_quarto(const std::string& value) {
  
  _impl_.tipo_quarto_.Set(value, GetArenaForAllocation());
}
inline std::string* ReservaRow::_internal_mutable_tipo_quarto() {
  
  return _impl_.tipo_quarto_.Mutable(GetArenaForAllocation());
}
inline std::string* ReservaRow::release_tipo_quarto() {
  // @@protoc_insertion_point(field_release:extractor.ReservaRow.tipo_quarto)
  return _impl_.tipo_quarto_.Release();
}
inline void ReservaRow::set_allocated_tipo_quarto(std::string* tipo_quarto) {
  if (tipo_quarto != nullptr) {
    
  } else {
    
  }
  _impl_.tipo_quarto_.SetAllocated(tipo_quarto, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tipo_quarto_.IsDefault()) {
    _impl_.tipo_quarto_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.ReservaRow.tipo_quarto)
}

// string nome_hotel = 2;
inline void ReservaRow::clear_nome_hotel() {
  _impl_.nome_hotel_.ClearToEmpty();
}
inline const std::string& ReservaRow::nome_hotel() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.nome_hotel)
  return _internal_nome_hotel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReservaRow::set_nome_hotel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nome_hotel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.nome_hotel)
}
inline std::string* ReservaRow::mutable_nome_hotel() {
  std::string* _s = _internal_mutable_nome_hotel();
  // @@protoc_insertion_point(field_mutable:extractor.ReservaRow.nome_hotel)
  return _s;
}
inline const std::string& ReservaRow::_internal_nome_hotel() const {
  return _impl_.nome_hotel_.Get();
}
inline void ReservaRow::_internal_set_nome_hotel(const std::string& value) {
  
  _impl_.nome_hotel_.Set(value, GetArenaForAllocation());
}
inline std::string* ReservaRow::_internal_mutable_nome_hotel() {
  
  return _impl_.nome_hotel_.Mutable(GetArenaForAllocation());
}
inline std::string* ReservaRow::release_nome_hotel() {
  // @@protoc_insertion_point(field_release:extractor.ReservaRow.nome_hotel)
  return _impl_.nome_hotel_.Release();
}
inline void ReservaRow::set_allocated_nome_hotel(std::string* nome_hotel) {
  if (nome_hotel != nullptr) {
    
  } else {
    
  }
  _impl_.nome_hotel_.SetAllocated(nome_hotel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_hotel_.IsDefault()) {
    _impl_.nome_hotel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.ReservaRow.nome_hotel)
}

// string cidade_destino = 3;
inline void ReservaRow::clear_cidade_destino() {
  _impl_.cidade_destino_.ClearToEmpty();
}
inline const std::string& ReservaRow::cidade_destino() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.cidade_destino)
  return _internal_cidade_destino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReservaRow::set_cidade_destino(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cidade_destino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.cidade_destino)
}
inline std::string* ReservaRow::mutable_cidade_destino() {
  std::string* _s = _internal_mutable_cidade_destino();
  // @@protoc_insertion_point(field_mutable:extractor.ReservaRow.cidade_destino)
  return _s;
}
inline const std::string& ReservaRow::_internal_cidade_destino() const {
  return _impl_.cidade_destino_.Get();
}
inline void ReservaRow::_internal_set_cidade_destino(const std::string& value) {
  
  _impl_.cidade_destino_.Set(value, GetArenaForAllocation());
}
inline std::string* ReservaRow::_internal_mutable_cidade_destino() {
  
  return _impl_.cidade_destino_.Mutable(GetArenaForAllocation());
}
inline std::string* ReservaRow::release_cidade_destino() {
  // @@protoc_insertion_point(field_release:extractor.ReservaRow.cidade_destino)
  return _impl_.cidade_destino_.Release();
}
inline void ReservaRow::set_allocated_cidade_destino(std::string* cidade_destino) {
  if (cidade_destino != nullptr) {
    
  } else {
    
  }
  _impl_.cidade_destino_.SetAllocated(cidade_destino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cidade_destino_.IsDefault()) {
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.ReservaRow.cidade_destino)
}

// int32 numero_quarto = 4;
inline void ReservaRow::clear_numero_quarto() {
  _impl_.numero_quarto_ = 0;
}
inline int32_t ReservaRow::_internal_numero_quarto() const {
  return _impl_.numero_quarto_;
}
inline int32_t ReservaRow::numero_quarto() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.numero_quarto)
  return _internal_numero_quarto();
}
inline void ReservaRow::_internal_set_numero_quarto(int32_t value) {
  
  _impl_.numero_quarto_ = value;
}
inline void ReservaRow::set_numero_quarto(int32_t value) {
  _internal_set_numero_quarto(value);
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.numero_quarto)
}

// int32 quantidade_pessoas = 5;
inline void ReservaRow::clear_quantidade_pessoas() {
  _impl_.quantidade_pessoas_ = 0;
}
inline int32_t ReservaRow::_internal_quantidade_pessoas() const {
  return _impl_.quantidade_pessoas_;
}
inline int32_t ReservaRow::quantidade_pessoas() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.quantidade_pessoas)
  return _internal_quantidade_pessoas();
}
inline void ReservaRow::_internal_set_quantidade_pessoas(int32_t value) {
  
  _impl_.quantidade_pessoas_ = value;
}
inline void ReservaRow::set_quantidade_pessoas(int32_t value) {
  _internal_set_quantidade_pessoas(value);
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.quantidade_pessoas)
}

// float preco = 6;
inline void ReservaRow::clear_preco() {
  _impl_.preco_ = 0;
}
inline float ReservaRow::_internal_preco() const {
  return _impl_.preco_;
}
inline float ReservaRow::preco() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.preco)
  return _internal_preco();
}
inline void ReservaRow::_internal_set_preco(float value) {
  
  _impl_.preco_ = value;
}
inline void ReservaRow::set_preco(float value) {
  _internal_set_preco(value);
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.preco)
}

// bool ocupado = 7;
inline void ReservaRow::clear_ocupado() {
  _impl_.ocupado_ = false;
}
inline bool ReservaRow::_internal_ocupado() const {
  return _impl_.ocupado_;
}
inline bool ReservaRow::ocupado() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.ocupado)
  return _internal_ocupado();
}
inline void ReservaRow::_internal_set_ocupado(bool value) {
  
  _impl_.ocupado_ = value;
}
inline void ReservaRow::set_ocupado(bool value) {
  _internal_set_ocupado(value);
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.ocupado)
}

// int32 data_ida_dia = 8;
inline void ReservaRow::clear_data_ida_dia() {
  _impl_.data_ida_dia_ = 0;
}
inline int32_t ReservaRow::_internal_data_ida_dia() const {
  return _impl_.data_ida_dia_;
}
inline int32_t ReservaRow::data_ida_dia() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.data_ida_dia)
  return _internal_data_ida_dia();
}
inline void ReservaRow::_internal_set_data_ida_dia(int32_t value) {
  
  _impl_.data_ida_dia_ = value;
}
inline void ReservaRow::set_data_ida_dia(int32_t value) {
  _internal_set_data_ida_dia(value);
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.data_ida_dia)
}

// int32 data_ida_mes = 9;
inline void ReservaRow::clear_data_ida_mes() {
  _impl_.data_ida_mes_ = 0;
}
inline int32_t ReservaRow::_internal_data_ida_mes() const {
  return _impl_.data_ida_mes_;
}
inline int32_t ReservaRow::data_ida_mes() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.data_ida_mes)
  return _internal_data_ida_mes();
}
inline void ReservaRow::_internal_set_data_ida_mes(int32_t value) {
  
  _impl_.data_ida_mes_ = value;
}
inline void ReservaRow::set_data_ida_mes(int32_t value) {
  _internal_set_data_ida_mes(value);
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.data_ida_mes)
}

// int32 data_ida_ano = 10;
inline void ReservaRow::clear_data_ida_ano() {
  _impl_.data_ida_ano_ = 0;
}
inline int32_t ReservaRow::_internal_data_ida_ano() const {
  return _impl_.data_ida_ano_;
}
inline int32_t ReservaRow::data_ida_ano() const {
  // @@protoc_insertion_point(field_get:extractor.ReservaRow.data_ida_ano)
  return _internal_data_ida_ano();
}
inline void ReservaRow::_internal_set_data_ida_ano(int32_t value) {
  
  _impl_.data_ida_ano_ = value;
}
inline void ReservaRow::set_data_ida_ano(int32_t value) {
  _internal_set_data_ida_ano(value);
  // @@protoc_insertion_point(field_set:extractor.ReservaRow.data_ida_ano)
}

// -------------------------------------------------------------------

// PesquisaRow

// string cidade_origem = 1;
inline void PesquisaRow::clear_cidade_origem() {
  _impl_.cidade_origem_.ClearToEmpty();
}
inline const std::string& PesquisaRow::cidade_origem() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.cidade_origem)
  return _internal_cidade_origem();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PesquisaRow::set_cidade_origem(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cidade_origem_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.cidade_origem)
}
inline std::string* PesquisaRow::mutable_cidade_origem() {
  std::string* _s = _internal_mutable_cidade_origem();
  // @@protoc_insertion_point(field_mutable:extractor.PesquisaRow.cidade_origem)
  return _s;
}
inline const std::string& PesquisaRow::_internal_cidade_origem() const {
  return _impl_.cidade_origem_.Get();
}
inline void PesquisaRow::_internal_set_cidade_origem(const std::string& value) {
  
  _impl_.cidade_origem_.Set(value, GetArenaForAllocation());
}
inline std::string* PesquisaRow::_internal_mutable_cidade_origem() {
  
  return _impl_.cidade_origem_.Mutable(GetArenaForAllocation());
}
inline std::string* PesquisaRow::release_cidade_origem() {
  // @@protoc_insertion_point(field_release:extractor.PesquisaRow.cidade_origem)
  return _impl_.cidade_origem_.Release();
}
inline void PesquisaRow::set_allocated_cidade_origem(std::string* cidade_origem) {
  if (cidade_origem != nullptr) {
    
  } else {
    
  }
  _impl_.cidade_origem_.SetAllocated(cidade_origem, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cidade_origem_.IsDefault()) {
    _impl_.cidade_origem_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.PesquisaRow.cidade_origem)
}

// string cidade_destino = 2;
inline void PesquisaRow::clear_cidade_destino() {
  _impl_.cidade_destino_.ClearToEmpty();
}
inline const std::string& PesquisaRow::cidade_destino() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.cidade_destino)
  return _internal_cidade_destino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PesquisaRow::set_cidade_destino(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cidade_destino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.cidade_destino)
}
inline std::string* PesquisaRow::mutable_cidade_destino() {
  std::string* _s = _internal_mutable_cidade_destino();
  // @@protoc_insertion_point(field_mutable:extractor.PesquisaRow.cidade_destino)
  return _s;
}
inline const std::string& PesquisaRow::_internal_cidade_destino() const {
  return _impl_.cidade_destino_.Get();
}
inline void PesquisaRow::_internal_set_cidade_destino(const std::string& value) {
  
  _impl_.cidade_destino_.Set(value, GetArenaForAllocation());
}
inline std::string* PesquisaRow::_internal_mutable_cidade_destino() {
  
  return _impl_.cidade_destino_.Mutable(GetArenaForAllocation());
}
inline std::string* PesquisaRow::release_cidade_destino() {
  // @@protoc_insertion_point(field_release:extractor.PesquisaRow.cidade_destino)
  return _impl_.cidade_destino_.Release();
}
inline void PesquisaRow::set_allocated_cidade_destino(std::string* cidade_destino) {
  if (cidade_destino != nullptr) {
    
  } else {
    
  }
  _impl_.cidade_destino_.SetAllocated(cidade_destino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cidade_destino_.IsDefault()) {
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.PesquisaRow.cidade_destino)
}

// string nome_hotel = 3;
inline void PesquisaRow::clear_nome_hotel() {
  _impl_.nome_hotel_.ClearToEmpty();
}
inline const std::string& PesquisaRow::nome_hotel() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.nome_hotel)
  return _internal_nome_hotel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PesquisaRow::set_nome_hotel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nome_hotel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.nome_hotel)
}
inline std::string* PesquisaRow::mutable_nome_hotel() {
  std::string* _s = _internal_mutable_nome_hotel();
  // @@protoc_insertion_point(field_mutable:extractor.PesquisaRow.nome_hotel)
  return _s;
}
inline const std::string& PesquisaRow::_internal_nome_hotel() const {
  return _impl_.nome_hotel_.Get();
}
inline void PesquisaRow::_internal_set_nome_hotel(const std::string& value) {
  
  _impl_.nome_hotel_.Set(value, GetArenaForAllocation());
}
inline std::string* PesquisaRow::_internal_mutable_nome_hotel() {
  
  return _impl_.nome_hotel_.Mutable(GetArenaForAllocation());
}
inline std::string* PesquisaRow::release_nome_hotel() {
  // @@protoc_insertion_point(field_release:extractor.PesquisaRow.nome_hotel)
  return _impl_.nome_hotel_.Release();
}
inline void PesquisaRow::set_allocated_nome_hotel(std::string* nome_hotel) {
  if (nome_hotel != nullptr) {
    
  } else {
    
  }
  _impl_.nome_hotel_.SetAllocated(nome_hotel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_hotel_.IsDefault()) {
    _impl_.nome_hotel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.PesquisaRow.nome_hotel)
}

// int32 data_ida_dia = 4;
inline void PesquisaRow::clear_data_ida_dia() {
  _impl_.data_ida_dia_ = 0;
}
inline int32_t PesquisaRow::_internal_data_ida_dia() const {
  return _impl_.data_ida_dia_;
}
inline int32_t PesquisaRow::data_ida_dia() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.data_ida_dia)
  return _internal_data_ida_dia();
}
inline void PesquisaRow::_internal_set_data_ida_dia(int32_t value) {
  
  _impl_.data_ida_dia_ = value;
}
inline void PesquisaRow::set_data_ida_dia(int32_t value) {
  _internal_set_data_ida_dia(value);
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.data_ida_dia)
}

// int32 data_ida_mes = 5;
inline void PesquisaRow::clear_data_ida_mes() {
  _impl_.data_ida_mes_ = 0;
}
inline int32_t PesquisaRow::_internal_data_ida_mes() const {
  return _impl_.data_ida_mes_;
}
inline int32_t PesquisaRow::data_ida_mes() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.data_ida_mes)
  return _internal_data_ida_mes();
}
inline void PesquisaRow::_internal_set_data_ida_mes(int32_t value) {
  
  _impl_.data_ida_mes_ = value;
}
inline void PesquisaRow::set_data_ida_mes(int32_t value) {
  _internal_set_data_ida_mes(value);
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.data_ida_mes)
}

// int32 data_ida_ano = 6;
inline void PesquisaRow::clear_data_ida_ano() {
  _impl_.data_ida_ano_ = 0;
}
inline int32_t PesquisaRow::_internal_data_ida_ano() const {
  return _impl_.data_ida_ano_;
}
inline int32_t PesquisaRow::data_ida_ano() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.data_ida_ano)
  return _internal_data_ida_ano();
}
inline void PesquisaRow::_internal_set_data_ida_ano(int32_t value) {
  
  _impl_.data_ida_ano_ = value;
}
inline void PesquisaRow::set_data_ida_ano(int32_t value) {
  _internal_set_data_ida_ano(value);
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.data_ida_ano)
}

// int32 data_volta_dia = 7;
inline void PesquisaRow::clear_data_volta_dia() {
  _impl_.data_volta_dia_ = 0;
}
inline int32_t PesquisaRow::_internal_data_volta_dia() const {
  return _impl_.data_volta_dia_;
}
inline int32_t PesquisaRow::data_volta_dia() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.data_volta_dia)
  return _internal_data_volta_dia();
}
inline void PesquisaRow::_internal_set_data_volta_dia(int32_t value) {
  
  _impl_.data_volta_dia_ = value;
}
inline void PesquisaRow::set_data_volta_dia(int32_t value) {
  _internal_set_data_volta_dia(value);
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.data_volta_dia)
}

// int32 data_volta_mes = 8;
inline void PesquisaRow::clear_data_volta_mes() {
  _impl_.data_volta_mes_ = 0;
}
inline int32_t PesquisaRow::_internal_data_volta_mes() const {
  return _impl_.data_volta_mes_;
}
inline int32_t PesquisaRow::data_volta_mes() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.data_volta_mes)
  return _internal_data_volta_mes();
}
inline void PesquisaRow::_internal_set_data_volta_mes(int32_t value) {
  
  _impl_.data_volta_mes_ = value;
}
inline void PesquisaRow::set_data_volta_mes(int32_t value) {
  _internal_set_data_volta_mes(value);
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.data_volta_mes)
}

// int32 data_volta_ano = 9;
inline void PesquisaRow::clear_data_volta_ano() {
  _impl_.data_volta_ano_ = 0;
}
inline int32_t PesquisaRow::_internal_data_volta_ano() const {
  return _impl_.data_volta_ano_;
}
inline int32_t PesquisaRow::data_volta_ano() const {
  // @@protoc_insertion_point(field_get:extractor.PesquisaRow.data_volta_ano)
  return _internal_data_volta_ano();
}
inline void PesquisaRow::_internal_set_data_volta_ano(int32_t value) {
  
  _impl_.data_volta_ano_ = value;
}
inline void PesquisaRow::set_data_volta_ano(int32_t value) {
  _internal_set_data_volta_ano(value);
  // @@protoc_insertion_point(field_set:extractor.PesquisaRow.data_volta_ano)
}

// -------------------------------------------------------------------

// AllDataSend

// string voos = 1;
inline void AllDataSend::clear_voos() {
  _impl_.voos_.ClearToEmpty();
}
inline const std::string& AllDataSend::voos() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataSend.voos)
  return _internal_voos();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllDataSend::set_voos(ArgT0&& arg0, ArgT... args) {
 
 _impl_.voos_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.AllDataSend.voos)
}
inline std::string* AllDataSend::mutable_voos() {
  std::string* _s = _internal_mutable_voos();
  // @@protoc_insertion_point(field_mutable:extractor.AllDataSend.voos)
  return _s;
}
inline const std::string& AllDataSend::_internal_voos() const {
  return _impl_.voos_.Get();
}
inline void AllDataSend::_internal_set_voos(const std::string& value) {
  
  _impl_.voos_.Set(value, GetArenaForAllocation());
}
inline std::string* AllDataSend::_internal_mutable_voos() {
  
  return _impl_.voos_.Mutable(GetArenaForAllocation());
}
inline std::string* AllDataSend::release_voos() {
  // @@protoc_insertion_point(field_release:extractor.AllDataSend.voos)
  return _impl_.voos_.Release();
}
inline void AllDataSend::set_allocated_voos(std::string* voos) {
  if (voos != nullptr) {
    
  } else {
    
  }
  _impl_.voos_.SetAllocated(voos, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.voos_.IsDefault()) {
    _impl_.voos_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.AllDataSend.voos)
}

// string reservas = 2;
inline void AllDataSend::clear_reservas() {
  _impl_.reservas_.ClearToEmpty();
}
inline const std::string& AllDataSend::reservas() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataSend.reservas)
  return _internal_reservas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllDataSend::set_reservas(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reservas_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.AllDataSend.reservas)
}
inline std::string* AllDataSend::mutable_reservas() {
  std::string* _s = _internal_mutable_reservas();
  // @@protoc_insertion_point(field_mutable:extractor.AllDataSend.reservas)
  return _s;
}
inline const std::string& AllDataSend::_internal_reservas() const {
  return _impl_.reservas_.Get();
}
inline void AllDataSend::_internal_set_reservas(const std::string& value) {
  
  _impl_.reservas_.Set(value, GetArenaForAllocation());
}
inline std::string* AllDataSend::_internal_mutable_reservas() {
  
  return _impl_.reservas_.Mutable(GetArenaForAllocation());
}
inline std::string* AllDataSend::release_reservas() {
  // @@protoc_insertion_point(field_release:extractor.AllDataSend.reservas)
  return _impl_.reservas_.Release();
}
inline void AllDataSend::set_allocated_reservas(std::string* reservas) {
  if (reservas != nullptr) {
    
  } else {
    
  }
  _impl_.reservas_.SetAllocated(reservas, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reservas_.IsDefault()) {
    _impl_.reservas_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.AllDataSend.reservas)
}

// string pesquisas = 3;
inline void AllDataSend::clear_pesquisas() {
  _impl_.pesquisas_.ClearToEmpty();
}
inline const std::string& AllDataSend::pesquisas() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataSend.pesquisas)
  return _internal_pesquisas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllDataSend::set_pesquisas(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pesquisas_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extractor.AllDataSend.pesquisas)
}
inline std::string* AllDataSend::mutable_pesquisas() {
  std::string* _s = _internal_mutable_pesquisas();
  // @@protoc_insertion_point(field_mutable:extractor.AllDataSend.pesquisas)
  return _s;
}
inline const std::string& AllDataSend::_internal_pesquisas() const {
  return _impl_.pesquisas_.Get();
}
inline void AllDataSend::_internal_set_pesquisas(const std::string& value) {
  
  _impl_.pesquisas_.Set(value, GetArenaForAllocation());
}
inline std::string* AllDataSend::_internal_mutable_pesquisas() {
  
  return _impl_.pesquisas_.Mutable(GetArenaForAllocation());
}
inline std::string* AllDataSend::release_pesquisas() {
  // @@protoc_insertion_point(field_release:extractor.AllDataSend.pesquisas)
  return _impl_.pesquisas_.Release();
}
inline void AllDataSend::set_allocated_pesquisas(std::string* pesquisas) {
  if (pesquisas != nullptr) {
    
  } else {
    
  }
  _impl_.pesquisas_.SetAllocated(pesquisas, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pesquisas_.IsDefault()) {
    _impl_.pesquisas_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extractor.AllDataSend.pesquisas)
}

// -------------------------------------------------------------------

// AllDataResponse

// int32 stats1 = 1;
inline void AllDataResponse::clear_stats1() {
  _impl_.stats1_ = 0;
}
inline int32_t AllDataResponse::_internal_stats1() const {
  return _impl_.stats1_;
}
inline int32_t AllDataResponse::stats1() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataResponse.stats1)
  return _internal_stats1();
}
inline void AllDataResponse::_internal_set_stats1(int32_t value) {
  
  _impl_.stats1_ = value;
}
inline void AllDataResponse::set_stats1(int32_t value) {
  _internal_set_stats1(value);
  // @@protoc_insertion_point(field_set:extractor.AllDataResponse.stats1)
}

// int32 stats2 = 2;
inline void AllDataResponse::clear_stats2() {
  _impl_.stats2_ = 0;
}
inline int32_t AllDataResponse::_internal_stats2() const {
  return _impl_.stats2_;
}
inline int32_t AllDataResponse::stats2() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataResponse.stats2)
  return _internal_stats2();
}
inline void AllDataResponse::_internal_set_stats2(int32_t value) {
  
  _impl_.stats2_ = value;
}
inline void AllDataResponse::set_stats2(int32_t value) {
  _internal_set_stats2(value);
  // @@protoc_insertion_point(field_set:extractor.AllDataResponse.stats2)
}

// int32 stats3 = 3;
inline void AllDataResponse::clear_stats3() {
  _impl_.stats3_ = 0;
}
inline int32_t AllDataResponse::_internal_stats3() const {
  return _impl_.stats3_;
}
inline int32_t AllDataResponse::stats3() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataResponse.stats3)
  return _internal_stats3();
}
inline void AllDataResponse::_internal_set_stats3(int32_t value) {
  
  _impl_.stats3_ = value;
}
inline void AllDataResponse::set_stats3(int32_t value) {
  _internal_set_stats3(value);
  // @@protoc_insertion_point(field_set:extractor.AllDataResponse.stats3)
}

// int32 stats4 = 4;
inline void AllDataResponse::clear_stats4() {
  _impl_.stats4_ = 0;
}
inline int32_t AllDataResponse::_internal_stats4() const {
  return _impl_.stats4_;
}
inline int32_t AllDataResponse::stats4() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataResponse.stats4)
  return _internal_stats4();
}
inline void AllDataResponse::_internal_set_stats4(int32_t value) {
  
  _impl_.stats4_ = value;
}
inline void AllDataResponse::set_stats4(int32_t value) {
  _internal_set_stats4(value);
  // @@protoc_insertion_point(field_set:extractor.AllDataResponse.stats4)
}

// int32 stats5 = 5;
inline void AllDataResponse::clear_stats5() {
  _impl_.stats5_ = 0;
}
inline int32_t AllDataResponse::_internal_stats5() const {
  return _impl_.stats5_;
}
inline int32_t AllDataResponse::stats5() const {
  // @@protoc_insertion_point(field_get:extractor.AllDataResponse.stats5)
  return _internal_stats5();
}
inline void AllDataResponse::_internal_set_stats5(int32_t value) {
  
  _impl_.stats5_ = value;
}
inline void AllDataResponse::set_stats5(int32_t value) {
  _internal_set_stats5(value);
  // @@protoc_insertion_point(field_set:extractor.AllDataResponse.stats5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace extractor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_extractor_2eproto
