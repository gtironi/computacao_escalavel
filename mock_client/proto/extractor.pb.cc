// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extractor.proto

#include "extractor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace extractor {
PROTOBUF_CONSTEXPR FlightRow::FlightRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cidade_origem_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cidade_destino_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.assentos_ocupados_)*/0
  , /*decltype(_impl_.assentos_totais_)*/0
  , /*decltype(_impl_.assentos_disponiveis_)*/0
  , /*decltype(_impl_.dia_)*/0
  , /*decltype(_impl_.mes_)*/0
  , /*decltype(_impl_.ano_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightRowDefaultTypeInternal() {}
  union {
    FlightRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightRowDefaultTypeInternal _FlightRow_default_instance_;
PROTOBUF_CONSTEXPR ReservaRow::ReservaRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tipo_quarto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nome_hotel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cidade_destino_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.numero_quarto_)*/0
  , /*decltype(_impl_.quantidade_pessoas_)*/0
  , /*decltype(_impl_.preco_)*/0
  , /*decltype(_impl_.ocupado_)*/false
  , /*decltype(_impl_.data_ida_dia_)*/0
  , /*decltype(_impl_.data_ida_mes_)*/0
  , /*decltype(_impl_.data_ida_ano_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReservaRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReservaRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReservaRowDefaultTypeInternal() {}
  union {
    ReservaRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReservaRowDefaultTypeInternal _ReservaRow_default_instance_;
PROTOBUF_CONSTEXPR PesquisaRow::PesquisaRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cidade_origem_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cidade_destino_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nome_hotel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_ida_dia_)*/0
  , /*decltype(_impl_.data_ida_mes_)*/0
  , /*decltype(_impl_.data_ida_ano_)*/0
  , /*decltype(_impl_.data_volta_dia_)*/0
  , /*decltype(_impl_.data_volta_mes_)*/0
  , /*decltype(_impl_.data_volta_ano_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PesquisaRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PesquisaRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PesquisaRowDefaultTypeInternal() {}
  union {
    PesquisaRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PesquisaRowDefaultTypeInternal _PesquisaRow_default_instance_;
PROTOBUF_CONSTEXPR AllDataSend::AllDataSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voos_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reservas_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pesquisas_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllDataSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllDataSendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllDataSendDefaultTypeInternal() {}
  union {
    AllDataSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllDataSendDefaultTypeInternal _AllDataSend_default_instance_;
PROTOBUF_CONSTEXPR AllDataResponse::AllDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats1_)*/0
  , /*decltype(_impl_.stats2_)*/0
  , /*decltype(_impl_.stats3_)*/0
  , /*decltype(_impl_.stats4_)*/0
  , /*decltype(_impl_.stats5_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllDataResponseDefaultTypeInternal() {}
  union {
    AllDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllDataResponseDefaultTypeInternal _AllDataResponse_default_instance_;
}  // namespace extractor
static ::_pb::Metadata file_level_metadata_extractor_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_extractor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_extractor_2eproto = nullptr;

const uint32_t TableStruct_extractor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.cidade_origem_),
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.cidade_destino_),
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.assentos_ocupados_),
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.assentos_totais_),
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.assentos_disponiveis_),
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.dia_),
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.mes_),
  PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.ano_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.tipo_quarto_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.nome_hotel_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.cidade_destino_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.numero_quarto_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.quantidade_pessoas_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.preco_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.ocupado_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.data_ida_dia_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.data_ida_mes_),
  PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.data_ida_ano_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.cidade_origem_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.cidade_destino_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.nome_hotel_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_ida_dia_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_ida_mes_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_ida_ano_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_volta_dia_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_volta_mes_),
  PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_volta_ano_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataSend, _impl_.voos_),
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataSend, _impl_.reservas_),
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataSend, _impl_.pesquisas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.stats1_),
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.stats2_),
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.stats3_),
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.stats4_),
  PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.stats5_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::extractor::FlightRow)},
  { 14, -1, -1, sizeof(::extractor::ReservaRow)},
  { 30, -1, -1, sizeof(::extractor::PesquisaRow)},
  { 45, -1, -1, sizeof(::extractor::AllDataSend)},
  { 54, -1, -1, sizeof(::extractor::AllDataResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::extractor::_FlightRow_default_instance_._instance,
  &::extractor::_ReservaRow_default_instance_._instance,
  &::extractor::_PesquisaRow_default_instance_._instance,
  &::extractor::_AllDataSend_default_instance_._instance,
  &::extractor::_AllDataResponse_default_instance_._instance,
};

const char descriptor_table_protodef_extractor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017extractor.proto\022\textractor\"\263\001\n\tFlightR"
  "ow\022\025\n\rcidade_origem\030\001 \001(\t\022\026\n\016cidade_dest"
  "ino\030\002 \001(\t\022\031\n\021assentos_ocupados\030\003 \001(\005\022\027\n\017"
  "assentos_totais\030\004 \001(\005\022\034\n\024assentos_dispon"
  "iveis\030\005 \001(\005\022\013\n\003dia\030\006 \001(\005\022\013\n\003mes\030\007 \001(\005\022\013\n"
  "\003ano\030\010 \001(\005\"\342\001\n\nReservaRow\022\023\n\013tipo_quarto"
  "\030\001 \001(\t\022\022\n\nnome_hotel\030\002 \001(\t\022\026\n\016cidade_des"
  "tino\030\003 \001(\t\022\025\n\rnumero_quarto\030\004 \001(\005\022\032\n\022qua"
  "ntidade_pessoas\030\005 \001(\005\022\r\n\005preco\030\006 \001(\002\022\017\n\007"
  "ocupado\030\007 \001(\010\022\024\n\014data_ida_dia\030\010 \001(\005\022\024\n\014d"
  "ata_ida_mes\030\t \001(\005\022\024\n\014data_ida_ano\030\n \001(\005\""
  "\332\001\n\013PesquisaRow\022\025\n\rcidade_origem\030\001 \001(\t\022\026"
  "\n\016cidade_destino\030\002 \001(\t\022\022\n\nnome_hotel\030\003 \001"
  "(\t\022\024\n\014data_ida_dia\030\004 \001(\005\022\024\n\014data_ida_mes"
  "\030\005 \001(\005\022\024\n\014data_ida_ano\030\006 \001(\005\022\026\n\016data_vol"
  "ta_dia\030\007 \001(\005\022\026\n\016data_volta_mes\030\010 \001(\005\022\026\n\016"
  "data_volta_ano\030\t \001(\005\"@\n\013AllDataSend\022\014\n\004v"
  "oos\030\001 \001(\t\022\020\n\010reservas\030\002 \001(\t\022\021\n\tpesquisas"
  "\030\003 \001(\t\"a\n\017AllDataResponse\022\016\n\006stats1\030\001 \001("
  "\005\022\016\n\006stats2\030\002 \001(\005\022\016\n\006stats3\030\003 \001(\005\022\016\n\006sta"
  "ts4\030\004 \001(\005\022\016\n\006stats5\030\005 \001(\0052T\n\020ExtractorSe"
  "rvice\022@\n\nGetAllData\022\026.extractor.AllDataS"
  "end\032\032.extractor.AllDataResponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_extractor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_extractor_2eproto = {
    false, false, 919, descriptor_table_protodef_extractor_2eproto,
    "extractor.proto",
    &descriptor_table_extractor_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_extractor_2eproto::offsets,
    file_level_metadata_extractor_2eproto, file_level_enum_descriptors_extractor_2eproto,
    file_level_service_descriptors_extractor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_extractor_2eproto_getter() {
  return &descriptor_table_extractor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_extractor_2eproto(&descriptor_table_extractor_2eproto);
namespace extractor {

// ===================================================================

class FlightRow::_Internal {
 public:
};

FlightRow::FlightRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:extractor.FlightRow)
}
FlightRow::FlightRow(const FlightRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cidade_origem_){}
    , decltype(_impl_.cidade_destino_){}
    , decltype(_impl_.assentos_ocupados_){}
    , decltype(_impl_.assentos_totais_){}
    , decltype(_impl_.assentos_disponiveis_){}
    , decltype(_impl_.dia_){}
    , decltype(_impl_.mes_){}
    , decltype(_impl_.ano_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cidade_origem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_origem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cidade_origem().empty()) {
    _this->_impl_.cidade_origem_.Set(from._internal_cidade_origem(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cidade_destino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cidade_destino().empty()) {
    _this->_impl_.cidade_destino_.Set(from._internal_cidade_destino(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.assentos_ocupados_, &from._impl_.assentos_ocupados_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ano_) -
    reinterpret_cast<char*>(&_impl_.assentos_ocupados_)) + sizeof(_impl_.ano_));
  // @@protoc_insertion_point(copy_constructor:extractor.FlightRow)
}

inline void FlightRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cidade_origem_){}
    , decltype(_impl_.cidade_destino_){}
    , decltype(_impl_.assentos_ocupados_){0}
    , decltype(_impl_.assentos_totais_){0}
    , decltype(_impl_.assentos_disponiveis_){0}
    , decltype(_impl_.dia_){0}
    , decltype(_impl_.mes_){0}
    , decltype(_impl_.ano_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cidade_origem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_origem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cidade_destino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlightRow::~FlightRow() {
  // @@protoc_insertion_point(destructor:extractor.FlightRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cidade_origem_.Destroy();
  _impl_.cidade_destino_.Destroy();
}

void FlightRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightRow::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.FlightRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cidade_origem_.ClearToEmpty();
  _impl_.cidade_destino_.ClearToEmpty();
  ::memset(&_impl_.assentos_ocupados_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ano_) -
      reinterpret_cast<char*>(&_impl_.assentos_ocupados_)) + sizeof(_impl_.ano_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cidade_origem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cidade_origem();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.FlightRow.cidade_origem"));
        } else
          goto handle_unusual;
        continue;
      // string cidade_destino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cidade_destino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.FlightRow.cidade_destino"));
        } else
          goto handle_unusual;
        continue;
      // int32 assentos_ocupados = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.assentos_ocupados_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 assentos_totais = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.assentos_totais_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 assentos_disponiveis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.assentos_disponiveis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dia = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ano = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.ano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extractor.FlightRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cidade_origem = 1;
  if (!this->_internal_cidade_origem().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidade_origem().data(), static_cast<int>(this->_internal_cidade_origem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.FlightRow.cidade_origem");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cidade_origem(), target);
  }

  // string cidade_destino = 2;
  if (!this->_internal_cidade_destino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidade_destino().data(), static_cast<int>(this->_internal_cidade_destino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.FlightRow.cidade_destino");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cidade_destino(), target);
  }

  // int32 assentos_ocupados = 3;
  if (this->_internal_assentos_ocupados() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_assentos_ocupados(), target);
  }

  // int32 assentos_totais = 4;
  if (this->_internal_assentos_totais() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_assentos_totais(), target);
  }

  // int32 assentos_disponiveis = 5;
  if (this->_internal_assentos_disponiveis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_assentos_disponiveis(), target);
  }

  // int32 dia = 6;
  if (this->_internal_dia() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_dia(), target);
  }

  // int32 mes = 7;
  if (this->_internal_mes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_mes(), target);
  }

  // int32 ano = 8;
  if (this->_internal_ano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_ano(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.FlightRow)
  return target;
}

size_t FlightRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extractor.FlightRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cidade_origem = 1;
  if (!this->_internal_cidade_origem().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidade_origem());
  }

  // string cidade_destino = 2;
  if (!this->_internal_cidade_destino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidade_destino());
  }

  // int32 assentos_ocupados = 3;
  if (this->_internal_assentos_ocupados() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_assentos_ocupados());
  }

  // int32 assentos_totais = 4;
  if (this->_internal_assentos_totais() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_assentos_totais());
  }

  // int32 assentos_disponiveis = 5;
  if (this->_internal_assentos_disponiveis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_assentos_disponiveis());
  }

  // int32 dia = 6;
  if (this->_internal_dia() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dia());
  }

  // int32 mes = 7;
  if (this->_internal_mes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mes());
  }

  // int32 ano = 8;
  if (this->_internal_ano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ano());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightRow::GetClassData() const { return &_class_data_; }


void FlightRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightRow*>(&to_msg);
  auto& from = static_cast<const FlightRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.FlightRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cidade_origem().empty()) {
    _this->_internal_set_cidade_origem(from._internal_cidade_origem());
  }
  if (!from._internal_cidade_destino().empty()) {
    _this->_internal_set_cidade_destino(from._internal_cidade_destino());
  }
  if (from._internal_assentos_ocupados() != 0) {
    _this->_internal_set_assentos_ocupados(from._internal_assentos_ocupados());
  }
  if (from._internal_assentos_totais() != 0) {
    _this->_internal_set_assentos_totais(from._internal_assentos_totais());
  }
  if (from._internal_assentos_disponiveis() != 0) {
    _this->_internal_set_assentos_disponiveis(from._internal_assentos_disponiveis());
  }
  if (from._internal_dia() != 0) {
    _this->_internal_set_dia(from._internal_dia());
  }
  if (from._internal_mes() != 0) {
    _this->_internal_set_mes(from._internal_mes());
  }
  if (from._internal_ano() != 0) {
    _this->_internal_set_ano(from._internal_ano());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightRow::CopyFrom(const FlightRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.FlightRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightRow::IsInitialized() const {
  return true;
}

void FlightRow::InternalSwap(FlightRow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cidade_origem_, lhs_arena,
      &other->_impl_.cidade_origem_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cidade_destino_, lhs_arena,
      &other->_impl_.cidade_destino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.ano_)
      + sizeof(FlightRow::_impl_.ano_)
      - PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_ocupados_)>(
          reinterpret_cast<char*>(&_impl_.assentos_ocupados_),
          reinterpret_cast<char*>(&other->_impl_.assentos_ocupados_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extractor_2eproto_getter, &descriptor_table_extractor_2eproto_once,
      file_level_metadata_extractor_2eproto[0]);
}

// ===================================================================

class ReservaRow::_Internal {
 public:
};

ReservaRow::ReservaRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:extractor.ReservaRow)
}
ReservaRow::ReservaRow(const ReservaRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReservaRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tipo_quarto_){}
    , decltype(_impl_.nome_hotel_){}
    , decltype(_impl_.cidade_destino_){}
    , decltype(_impl_.numero_quarto_){}
    , decltype(_impl_.quantidade_pessoas_){}
    , decltype(_impl_.preco_){}
    , decltype(_impl_.ocupado_){}
    , decltype(_impl_.data_ida_dia_){}
    , decltype(_impl_.data_ida_mes_){}
    , decltype(_impl_.data_ida_ano_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tipo_quarto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tipo_quarto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tipo_quarto().empty()) {
    _this->_impl_.tipo_quarto_.Set(from._internal_tipo_quarto(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nome_hotel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_hotel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nome_hotel().empty()) {
    _this->_impl_.nome_hotel_.Set(from._internal_nome_hotel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cidade_destino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cidade_destino().empty()) {
    _this->_impl_.cidade_destino_.Set(from._internal_cidade_destino(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.numero_quarto_, &from._impl_.numero_quarto_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_ida_ano_) -
    reinterpret_cast<char*>(&_impl_.numero_quarto_)) + sizeof(_impl_.data_ida_ano_));
  // @@protoc_insertion_point(copy_constructor:extractor.ReservaRow)
}

inline void ReservaRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tipo_quarto_){}
    , decltype(_impl_.nome_hotel_){}
    , decltype(_impl_.cidade_destino_){}
    , decltype(_impl_.numero_quarto_){0}
    , decltype(_impl_.quantidade_pessoas_){0}
    , decltype(_impl_.preco_){0}
    , decltype(_impl_.ocupado_){false}
    , decltype(_impl_.data_ida_dia_){0}
    , decltype(_impl_.data_ida_mes_){0}
    , decltype(_impl_.data_ida_ano_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tipo_quarto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tipo_quarto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nome_hotel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_hotel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cidade_destino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReservaRow::~ReservaRow() {
  // @@protoc_insertion_point(destructor:extractor.ReservaRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReservaRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tipo_quarto_.Destroy();
  _impl_.nome_hotel_.Destroy();
  _impl_.cidade_destino_.Destroy();
}

void ReservaRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReservaRow::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.ReservaRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tipo_quarto_.ClearToEmpty();
  _impl_.nome_hotel_.ClearToEmpty();
  _impl_.cidade_destino_.ClearToEmpty();
  ::memset(&_impl_.numero_quarto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_ida_ano_) -
      reinterpret_cast<char*>(&_impl_.numero_quarto_)) + sizeof(_impl_.data_ida_ano_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReservaRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tipo_quarto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tipo_quarto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.ReservaRow.tipo_quarto"));
        } else
          goto handle_unusual;
        continue;
      // string nome_hotel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nome_hotel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.ReservaRow.nome_hotel"));
        } else
          goto handle_unusual;
        continue;
      // string cidade_destino = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cidade_destino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.ReservaRow.cidade_destino"));
        } else
          goto handle_unusual;
        continue;
      // int32 numero_quarto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.numero_quarto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quantidade_pessoas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quantidade_pessoas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float preco = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.preco_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool ocupado = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ocupado_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_ida_dia = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.data_ida_dia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_ida_mes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.data_ida_mes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_ida_ano = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.data_ida_ano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReservaRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extractor.ReservaRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tipo_quarto = 1;
  if (!this->_internal_tipo_quarto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tipo_quarto().data(), static_cast<int>(this->_internal_tipo_quarto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.ReservaRow.tipo_quarto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tipo_quarto(), target);
  }

  // string nome_hotel = 2;
  if (!this->_internal_nome_hotel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nome_hotel().data(), static_cast<int>(this->_internal_nome_hotel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.ReservaRow.nome_hotel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nome_hotel(), target);
  }

  // string cidade_destino = 3;
  if (!this->_internal_cidade_destino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidade_destino().data(), static_cast<int>(this->_internal_cidade_destino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.ReservaRow.cidade_destino");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cidade_destino(), target);
  }

  // int32 numero_quarto = 4;
  if (this->_internal_numero_quarto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_numero_quarto(), target);
  }

  // int32 quantidade_pessoas = 5;
  if (this->_internal_quantidade_pessoas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantidade_pessoas(), target);
  }

  // float preco = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_preco = this->_internal_preco();
  uint32_t raw_preco;
  memcpy(&raw_preco, &tmp_preco, sizeof(tmp_preco));
  if (raw_preco != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_preco(), target);
  }

  // bool ocupado = 7;
  if (this->_internal_ocupado() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_ocupado(), target);
  }

  // int32 data_ida_dia = 8;
  if (this->_internal_data_ida_dia() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_data_ida_dia(), target);
  }

  // int32 data_ida_mes = 9;
  if (this->_internal_data_ida_mes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_data_ida_mes(), target);
  }

  // int32 data_ida_ano = 10;
  if (this->_internal_data_ida_ano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_data_ida_ano(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.ReservaRow)
  return target;
}

size_t ReservaRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extractor.ReservaRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tipo_quarto = 1;
  if (!this->_internal_tipo_quarto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tipo_quarto());
  }

  // string nome_hotel = 2;
  if (!this->_internal_nome_hotel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nome_hotel());
  }

  // string cidade_destino = 3;
  if (!this->_internal_cidade_destino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidade_destino());
  }

  // int32 numero_quarto = 4;
  if (this->_internal_numero_quarto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numero_quarto());
  }

  // int32 quantidade_pessoas = 5;
  if (this->_internal_quantidade_pessoas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantidade_pessoas());
  }

  // float preco = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_preco = this->_internal_preco();
  uint32_t raw_preco;
  memcpy(&raw_preco, &tmp_preco, sizeof(tmp_preco));
  if (raw_preco != 0) {
    total_size += 1 + 4;
  }

  // bool ocupado = 7;
  if (this->_internal_ocupado() != 0) {
    total_size += 1 + 1;
  }

  // int32 data_ida_dia = 8;
  if (this->_internal_data_ida_dia() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_ida_dia());
  }

  // int32 data_ida_mes = 9;
  if (this->_internal_data_ida_mes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_ida_mes());
  }

  // int32 data_ida_ano = 10;
  if (this->_internal_data_ida_ano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_ida_ano());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReservaRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReservaRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReservaRow::GetClassData() const { return &_class_data_; }


void ReservaRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReservaRow*>(&to_msg);
  auto& from = static_cast<const ReservaRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.ReservaRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tipo_quarto().empty()) {
    _this->_internal_set_tipo_quarto(from._internal_tipo_quarto());
  }
  if (!from._internal_nome_hotel().empty()) {
    _this->_internal_set_nome_hotel(from._internal_nome_hotel());
  }
  if (!from._internal_cidade_destino().empty()) {
    _this->_internal_set_cidade_destino(from._internal_cidade_destino());
  }
  if (from._internal_numero_quarto() != 0) {
    _this->_internal_set_numero_quarto(from._internal_numero_quarto());
  }
  if (from._internal_quantidade_pessoas() != 0) {
    _this->_internal_set_quantidade_pessoas(from._internal_quantidade_pessoas());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_preco = from._internal_preco();
  uint32_t raw_preco;
  memcpy(&raw_preco, &tmp_preco, sizeof(tmp_preco));
  if (raw_preco != 0) {
    _this->_internal_set_preco(from._internal_preco());
  }
  if (from._internal_ocupado() != 0) {
    _this->_internal_set_ocupado(from._internal_ocupado());
  }
  if (from._internal_data_ida_dia() != 0) {
    _this->_internal_set_data_ida_dia(from._internal_data_ida_dia());
  }
  if (from._internal_data_ida_mes() != 0) {
    _this->_internal_set_data_ida_mes(from._internal_data_ida_mes());
  }
  if (from._internal_data_ida_ano() != 0) {
    _this->_internal_set_data_ida_ano(from._internal_data_ida_ano());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReservaRow::CopyFrom(const ReservaRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.ReservaRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReservaRow::IsInitialized() const {
  return true;
}

void ReservaRow::InternalSwap(ReservaRow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tipo_quarto_, lhs_arena,
      &other->_impl_.tipo_quarto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nome_hotel_, lhs_arena,
      &other->_impl_.nome_hotel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cidade_destino_, lhs_arena,
      &other->_impl_.cidade_destino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_ano_)
      + sizeof(ReservaRow::_impl_.data_ida_ano_)
      - PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.numero_quarto_)>(
          reinterpret_cast<char*>(&_impl_.numero_quarto_),
          reinterpret_cast<char*>(&other->_impl_.numero_quarto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReservaRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extractor_2eproto_getter, &descriptor_table_extractor_2eproto_once,
      file_level_metadata_extractor_2eproto[1]);
}

// ===================================================================

class PesquisaRow::_Internal {
 public:
};

PesquisaRow::PesquisaRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:extractor.PesquisaRow)
}
PesquisaRow::PesquisaRow(const PesquisaRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PesquisaRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cidade_origem_){}
    , decltype(_impl_.cidade_destino_){}
    , decltype(_impl_.nome_hotel_){}
    , decltype(_impl_.data_ida_dia_){}
    , decltype(_impl_.data_ida_mes_){}
    , decltype(_impl_.data_ida_ano_){}
    , decltype(_impl_.data_volta_dia_){}
    , decltype(_impl_.data_volta_mes_){}
    , decltype(_impl_.data_volta_ano_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cidade_origem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_origem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cidade_origem().empty()) {
    _this->_impl_.cidade_origem_.Set(from._internal_cidade_origem(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cidade_destino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cidade_destino().empty()) {
    _this->_impl_.cidade_destino_.Set(from._internal_cidade_destino(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nome_hotel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_hotel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nome_hotel().empty()) {
    _this->_impl_.nome_hotel_.Set(from._internal_nome_hotel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.data_ida_dia_, &from._impl_.data_ida_dia_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_volta_ano_) -
    reinterpret_cast<char*>(&_impl_.data_ida_dia_)) + sizeof(_impl_.data_volta_ano_));
  // @@protoc_insertion_point(copy_constructor:extractor.PesquisaRow)
}

inline void PesquisaRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cidade_origem_){}
    , decltype(_impl_.cidade_destino_){}
    , decltype(_impl_.nome_hotel_){}
    , decltype(_impl_.data_ida_dia_){0}
    , decltype(_impl_.data_ida_mes_){0}
    , decltype(_impl_.data_ida_ano_){0}
    , decltype(_impl_.data_volta_dia_){0}
    , decltype(_impl_.data_volta_mes_){0}
    , decltype(_impl_.data_volta_ano_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cidade_origem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_origem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cidade_destino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidade_destino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nome_hotel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_hotel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PesquisaRow::~PesquisaRow() {
  // @@protoc_insertion_point(destructor:extractor.PesquisaRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PesquisaRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cidade_origem_.Destroy();
  _impl_.cidade_destino_.Destroy();
  _impl_.nome_hotel_.Destroy();
}

void PesquisaRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PesquisaRow::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.PesquisaRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cidade_origem_.ClearToEmpty();
  _impl_.cidade_destino_.ClearToEmpty();
  _impl_.nome_hotel_.ClearToEmpty();
  ::memset(&_impl_.data_ida_dia_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_volta_ano_) -
      reinterpret_cast<char*>(&_impl_.data_ida_dia_)) + sizeof(_impl_.data_volta_ano_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PesquisaRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cidade_origem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cidade_origem();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.PesquisaRow.cidade_origem"));
        } else
          goto handle_unusual;
        continue;
      // string cidade_destino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cidade_destino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.PesquisaRow.cidade_destino"));
        } else
          goto handle_unusual;
        continue;
      // string nome_hotel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nome_hotel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.PesquisaRow.nome_hotel"));
        } else
          goto handle_unusual;
        continue;
      // int32 data_ida_dia = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.data_ida_dia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_ida_mes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.data_ida_mes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_ida_ano = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.data_ida_ano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_volta_dia = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.data_volta_dia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_volta_mes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.data_volta_mes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_volta_ano = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.data_volta_ano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PesquisaRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extractor.PesquisaRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cidade_origem = 1;
  if (!this->_internal_cidade_origem().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidade_origem().data(), static_cast<int>(this->_internal_cidade_origem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.PesquisaRow.cidade_origem");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cidade_origem(), target);
  }

  // string cidade_destino = 2;
  if (!this->_internal_cidade_destino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidade_destino().data(), static_cast<int>(this->_internal_cidade_destino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.PesquisaRow.cidade_destino");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cidade_destino(), target);
  }

  // string nome_hotel = 3;
  if (!this->_internal_nome_hotel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nome_hotel().data(), static_cast<int>(this->_internal_nome_hotel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.PesquisaRow.nome_hotel");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nome_hotel(), target);
  }

  // int32 data_ida_dia = 4;
  if (this->_internal_data_ida_dia() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_data_ida_dia(), target);
  }

  // int32 data_ida_mes = 5;
  if (this->_internal_data_ida_mes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_data_ida_mes(), target);
  }

  // int32 data_ida_ano = 6;
  if (this->_internal_data_ida_ano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_data_ida_ano(), target);
  }

  // int32 data_volta_dia = 7;
  if (this->_internal_data_volta_dia() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_data_volta_dia(), target);
  }

  // int32 data_volta_mes = 8;
  if (this->_internal_data_volta_mes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_data_volta_mes(), target);
  }

  // int32 data_volta_ano = 9;
  if (this->_internal_data_volta_ano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_data_volta_ano(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.PesquisaRow)
  return target;
}

size_t PesquisaRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extractor.PesquisaRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cidade_origem = 1;
  if (!this->_internal_cidade_origem().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidade_origem());
  }

  // string cidade_destino = 2;
  if (!this->_internal_cidade_destino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidade_destino());
  }

  // string nome_hotel = 3;
  if (!this->_internal_nome_hotel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nome_hotel());
  }

  // int32 data_ida_dia = 4;
  if (this->_internal_data_ida_dia() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_ida_dia());
  }

  // int32 data_ida_mes = 5;
  if (this->_internal_data_ida_mes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_ida_mes());
  }

  // int32 data_ida_ano = 6;
  if (this->_internal_data_ida_ano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_ida_ano());
  }

  // int32 data_volta_dia = 7;
  if (this->_internal_data_volta_dia() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_volta_dia());
  }

  // int32 data_volta_mes = 8;
  if (this->_internal_data_volta_mes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_volta_mes());
  }

  // int32 data_volta_ano = 9;
  if (this->_internal_data_volta_ano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_volta_ano());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PesquisaRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PesquisaRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PesquisaRow::GetClassData() const { return &_class_data_; }


void PesquisaRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PesquisaRow*>(&to_msg);
  auto& from = static_cast<const PesquisaRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.PesquisaRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cidade_origem().empty()) {
    _this->_internal_set_cidade_origem(from._internal_cidade_origem());
  }
  if (!from._internal_cidade_destino().empty()) {
    _this->_internal_set_cidade_destino(from._internal_cidade_destino());
  }
  if (!from._internal_nome_hotel().empty()) {
    _this->_internal_set_nome_hotel(from._internal_nome_hotel());
  }
  if (from._internal_data_ida_dia() != 0) {
    _this->_internal_set_data_ida_dia(from._internal_data_ida_dia());
  }
  if (from._internal_data_ida_mes() != 0) {
    _this->_internal_set_data_ida_mes(from._internal_data_ida_mes());
  }
  if (from._internal_data_ida_ano() != 0) {
    _this->_internal_set_data_ida_ano(from._internal_data_ida_ano());
  }
  if (from._internal_data_volta_dia() != 0) {
    _this->_internal_set_data_volta_dia(from._internal_data_volta_dia());
  }
  if (from._internal_data_volta_mes() != 0) {
    _this->_internal_set_data_volta_mes(from._internal_data_volta_mes());
  }
  if (from._internal_data_volta_ano() != 0) {
    _this->_internal_set_data_volta_ano(from._internal_data_volta_ano());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PesquisaRow::CopyFrom(const PesquisaRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.PesquisaRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PesquisaRow::IsInitialized() const {
  return true;
}

void PesquisaRow::InternalSwap(PesquisaRow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cidade_origem_, lhs_arena,
      &other->_impl_.cidade_origem_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cidade_destino_, lhs_arena,
      &other->_impl_.cidade_destino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nome_hotel_, lhs_arena,
      &other->_impl_.nome_hotel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_ano_)
      + sizeof(PesquisaRow::_impl_.data_volta_ano_)
      - PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_dia_)>(
          reinterpret_cast<char*>(&_impl_.data_ida_dia_),
          reinterpret_cast<char*>(&other->_impl_.data_ida_dia_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PesquisaRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extractor_2eproto_getter, &descriptor_table_extractor_2eproto_once,
      file_level_metadata_extractor_2eproto[2]);
}

// ===================================================================

class AllDataSend::_Internal {
 public:
};

AllDataSend::AllDataSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:extractor.AllDataSend)
}
AllDataSend::AllDataSend(const AllDataSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllDataSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voos_){}
    , decltype(_impl_.reservas_){}
    , decltype(_impl_.pesquisas_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voos().empty()) {
    _this->_impl_.voos_.Set(from._internal_voos(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reservas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reservas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reservas().empty()) {
    _this->_impl_.reservas_.Set(from._internal_reservas(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pesquisas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pesquisas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pesquisas().empty()) {
    _this->_impl_.pesquisas_.Set(from._internal_pesquisas(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:extractor.AllDataSend)
}

inline void AllDataSend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.voos_){}
    , decltype(_impl_.reservas_){}
    , decltype(_impl_.pesquisas_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.voos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reservas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reservas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pesquisas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pesquisas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllDataSend::~AllDataSend() {
  // @@protoc_insertion_point(destructor:extractor.AllDataSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllDataSend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voos_.Destroy();
  _impl_.reservas_.Destroy();
  _impl_.pesquisas_.Destroy();
}

void AllDataSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllDataSend::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.AllDataSend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voos_.ClearToEmpty();
  _impl_.reservas_.ClearToEmpty();
  _impl_.pesquisas_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllDataSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string voos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_voos();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.AllDataSend.voos"));
        } else
          goto handle_unusual;
        continue;
      // string reservas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reservas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.AllDataSend.reservas"));
        } else
          goto handle_unusual;
        continue;
      // string pesquisas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pesquisas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "extractor.AllDataSend.pesquisas"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllDataSend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extractor.AllDataSend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string voos = 1;
  if (!this->_internal_voos().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voos().data(), static_cast<int>(this->_internal_voos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.AllDataSend.voos");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_voos(), target);
  }

  // string reservas = 2;
  if (!this->_internal_reservas().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reservas().data(), static_cast<int>(this->_internal_reservas().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.AllDataSend.reservas");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reservas(), target);
  }

  // string pesquisas = 3;
  if (!this->_internal_pesquisas().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pesquisas().data(), static_cast<int>(this->_internal_pesquisas().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "extractor.AllDataSend.pesquisas");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pesquisas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.AllDataSend)
  return target;
}

size_t AllDataSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extractor.AllDataSend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voos = 1;
  if (!this->_internal_voos().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voos());
  }

  // string reservas = 2;
  if (!this->_internal_reservas().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reservas());
  }

  // string pesquisas = 3;
  if (!this->_internal_pesquisas().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pesquisas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllDataSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllDataSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllDataSend::GetClassData() const { return &_class_data_; }


void AllDataSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllDataSend*>(&to_msg);
  auto& from = static_cast<const AllDataSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.AllDataSend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_voos().empty()) {
    _this->_internal_set_voos(from._internal_voos());
  }
  if (!from._internal_reservas().empty()) {
    _this->_internal_set_reservas(from._internal_reservas());
  }
  if (!from._internal_pesquisas().empty()) {
    _this->_internal_set_pesquisas(from._internal_pesquisas());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllDataSend::CopyFrom(const AllDataSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.AllDataSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDataSend::IsInitialized() const {
  return true;
}

void AllDataSend::InternalSwap(AllDataSend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.voos_, lhs_arena,
      &other->_impl_.voos_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reservas_, lhs_arena,
      &other->_impl_.reservas_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pesquisas_, lhs_arena,
      &other->_impl_.pesquisas_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AllDataSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extractor_2eproto_getter, &descriptor_table_extractor_2eproto_once,
      file_level_metadata_extractor_2eproto[3]);
}

// ===================================================================

class AllDataResponse::_Internal {
 public:
};

AllDataResponse::AllDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:extractor.AllDataResponse)
}
AllDataResponse::AllDataResponse(const AllDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats1_){}
    , decltype(_impl_.stats2_){}
    , decltype(_impl_.stats3_){}
    , decltype(_impl_.stats4_){}
    , decltype(_impl_.stats5_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stats1_, &from._impl_.stats1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stats5_) -
    reinterpret_cast<char*>(&_impl_.stats1_)) + sizeof(_impl_.stats5_));
  // @@protoc_insertion_point(copy_constructor:extractor.AllDataResponse)
}

inline void AllDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats1_){0}
    , decltype(_impl_.stats2_){0}
    , decltype(_impl_.stats3_){0}
    , decltype(_impl_.stats4_){0}
    , decltype(_impl_.stats5_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllDataResponse::~AllDataResponse() {
  // @@protoc_insertion_point(destructor:extractor.AllDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.AllDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.stats1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stats5_) -
      reinterpret_cast<char*>(&_impl_.stats1_)) + sizeof(_impl_.stats5_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stats1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stats1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stats2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stats2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stats3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stats3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stats4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.stats4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stats5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.stats5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extractor.AllDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stats1 = 1;
  if (this->_internal_stats1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_stats1(), target);
  }

  // int32 stats2 = 2;
  if (this->_internal_stats2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stats2(), target);
  }

  // int32 stats3 = 3;
  if (this->_internal_stats3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_stats3(), target);
  }

  // int32 stats4 = 4;
  if (this->_internal_stats4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stats4(), target);
  }

  // int32 stats5 = 5;
  if (this->_internal_stats5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_stats5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.AllDataResponse)
  return target;
}

size_t AllDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extractor.AllDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stats1 = 1;
  if (this->_internal_stats1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stats1());
  }

  // int32 stats2 = 2;
  if (this->_internal_stats2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stats2());
  }

  // int32 stats3 = 3;
  if (this->_internal_stats3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stats3());
  }

  // int32 stats4 = 4;
  if (this->_internal_stats4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stats4());
  }

  // int32 stats5 = 5;
  if (this->_internal_stats5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stats5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllDataResponse::GetClassData() const { return &_class_data_; }


void AllDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllDataResponse*>(&to_msg);
  auto& from = static_cast<const AllDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.AllDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stats1() != 0) {
    _this->_internal_set_stats1(from._internal_stats1());
  }
  if (from._internal_stats2() != 0) {
    _this->_internal_set_stats2(from._internal_stats2());
  }
  if (from._internal_stats3() != 0) {
    _this->_internal_set_stats3(from._internal_stats3());
  }
  if (from._internal_stats4() != 0) {
    _this->_internal_set_stats4(from._internal_stats4());
  }
  if (from._internal_stats5() != 0) {
    _this->_internal_set_stats5(from._internal_stats5());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllDataResponse::CopyFrom(const AllDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.AllDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDataResponse::IsInitialized() const {
  return true;
}

void AllDataResponse::InternalSwap(AllDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.stats5_)
      + sizeof(AllDataResponse::_impl_.stats5_)
      - PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.stats1_)>(
          reinterpret_cast<char*>(&_impl_.stats1_),
          reinterpret_cast<char*>(&other->_impl_.stats1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extractor_2eproto_getter, &descriptor_table_extractor_2eproto_once,
      file_level_metadata_extractor_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace extractor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::extractor::FlightRow*
Arena::CreateMaybeMessage< ::extractor::FlightRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extractor::FlightRow >(arena);
}
template<> PROTOBUF_NOINLINE ::extractor::ReservaRow*
Arena::CreateMaybeMessage< ::extractor::ReservaRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extractor::ReservaRow >(arena);
}
template<> PROTOBUF_NOINLINE ::extractor::PesquisaRow*
Arena::CreateMaybeMessage< ::extractor::PesquisaRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extractor::PesquisaRow >(arena);
}
template<> PROTOBUF_NOINLINE ::extractor::AllDataSend*
Arena::CreateMaybeMessage< ::extractor::AllDataSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extractor::AllDataSend >(arena);
}
template<> PROTOBUF_NOINLINE ::extractor::AllDataResponse*
Arena::CreateMaybeMessage< ::extractor::AllDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extractor::AllDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
