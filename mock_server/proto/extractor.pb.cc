// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: extractor.proto
// Protobuf C++ Version: 6.30.0

#include "extractor.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace extractor {

inline constexpr ReservaRow::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tipo_quarto_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nome_hotel_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cidade_destino_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        numero_quarto_{0},
        quantidade_pessoas_{0},
        preco_{0},
        ocupado_{false},
        data_ida_dia_{0},
        data_ida_mes_{0},
        data_ida_ano_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReservaRow::ReservaRow(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReservaRow_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReservaRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReservaRowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReservaRowDefaultTypeInternal() {}
  union {
    ReservaRow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReservaRowDefaultTypeInternal _ReservaRow_default_instance_;

inline constexpr PesquisaRow::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cidade_origem_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cidade_destino_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nome_hotel_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_ida_dia_{0},
        data_ida_mes_{0},
        data_ida_ano_{0},
        data_volta_dia_{0},
        data_volta_mes_{0},
        data_volta_ano_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PesquisaRow::PesquisaRow(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PesquisaRow_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PesquisaRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PesquisaRowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PesquisaRowDefaultTypeInternal() {}
  union {
    PesquisaRow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PesquisaRowDefaultTypeInternal _PesquisaRow_default_instance_;

inline constexpr FlightRow::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cidade_origem_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cidade_destino_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        assentos_ocupados_{0},
        assentos_totais_{0},
        assentos_disponiveis_{0},
        dia_{0},
        mes_{0},
        ano_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FlightRow::FlightRow(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FlightRow_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FlightRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightRowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightRowDefaultTypeInternal() {}
  union {
    FlightRow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightRowDefaultTypeInternal _FlightRow_default_instance_;

inline constexpr AllDataResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : voos_{},
        reservas_{},
        pesquisas_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AllDataResponse::AllDataResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AllDataResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AllDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllDataResponseDefaultTypeInternal() {}
  union {
    AllDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllDataResponseDefaultTypeInternal _AllDataResponse_default_instance_;
}  // namespace extractor
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_extractor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_extractor_2eproto = nullptr;
const ::uint32_t
    TableStruct_extractor_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.cidade_origem_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.cidade_destino_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.assentos_ocupados_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.assentos_totais_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.assentos_disponiveis_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.dia_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.mes_),
        PROTOBUF_FIELD_OFFSET(::extractor::FlightRow, _impl_.ano_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.tipo_quarto_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.nome_hotel_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.cidade_destino_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.numero_quarto_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.quantidade_pessoas_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.preco_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.ocupado_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.data_ida_dia_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.data_ida_mes_),
        PROTOBUF_FIELD_OFFSET(::extractor::ReservaRow, _impl_.data_ida_ano_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.cidade_origem_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.cidade_destino_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.nome_hotel_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_ida_dia_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_ida_mes_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_ida_ano_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_volta_dia_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_volta_mes_),
        PROTOBUF_FIELD_OFFSET(::extractor::PesquisaRow, _impl_.data_volta_ano_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.voos_),
        PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.reservas_),
        PROTOBUF_FIELD_OFFSET(::extractor::AllDataResponse, _impl_.pesquisas_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 16, -1, sizeof(::extractor::FlightRow)},
        {24, 42, -1, sizeof(::extractor::ReservaRow)},
        {52, 69, -1, sizeof(::extractor::PesquisaRow)},
        {78, -1, -1, sizeof(::extractor::AllDataResponse)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::extractor::_FlightRow_default_instance_._instance,
    &::extractor::_ReservaRow_default_instance_._instance,
    &::extractor::_PesquisaRow_default_instance_._instance,
    &::extractor::_AllDataResponse_default_instance_._instance,
};
const char descriptor_table_protodef_extractor_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017extractor.proto\022\textractor\032\033google/pro"
    "tobuf/empty.proto\"\263\001\n\tFlightRow\022\025\n\rcidad"
    "e_origem\030\001 \001(\t\022\026\n\016cidade_destino\030\002 \001(\t\022\031"
    "\n\021assentos_ocupados\030\003 \001(\005\022\027\n\017assentos_to"
    "tais\030\004 \001(\005\022\034\n\024assentos_disponiveis\030\005 \001(\005"
    "\022\013\n\003dia\030\006 \001(\005\022\013\n\003mes\030\007 \001(\005\022\013\n\003ano\030\010 \001(\005\""
    "\342\001\n\nReservaRow\022\023\n\013tipo_quarto\030\001 \001(\t\022\022\n\nn"
    "ome_hotel\030\002 \001(\t\022\026\n\016cidade_destino\030\003 \001(\t\022"
    "\025\n\rnumero_quarto\030\004 \001(\005\022\032\n\022quantidade_pes"
    "soas\030\005 \001(\005\022\r\n\005preco\030\006 \001(\002\022\017\n\007ocupado\030\007 \001"
    "(\010\022\024\n\014data_ida_dia\030\010 \001(\005\022\024\n\014data_ida_mes"
    "\030\t \001(\005\022\024\n\014data_ida_ano\030\n \001(\005\"\332\001\n\013Pesquis"
    "aRow\022\025\n\rcidade_origem\030\001 \001(\t\022\026\n\016cidade_de"
    "stino\030\002 \001(\t\022\022\n\nnome_hotel\030\003 \001(\t\022\024\n\014data_"
    "ida_dia\030\004 \001(\005\022\024\n\014data_ida_mes\030\005 \001(\005\022\024\n\014d"
    "ata_ida_ano\030\006 \001(\005\022\026\n\016data_volta_dia\030\007 \001("
    "\005\022\026\n\016data_volta_mes\030\010 \001(\005\022\026\n\016data_volta_"
    "ano\030\t \001(\005\"\211\001\n\017AllDataResponse\022\"\n\004voos\030\001 "
    "\003(\0132\024.extractor.FlightRow\022\'\n\010reservas\030\002 "
    "\003(\0132\025.extractor.ReservaRow\022)\n\tpesquisas\030"
    "\003 \003(\0132\026.extractor.PesquisaRow2T\n\020Extract"
    "orService\022@\n\nGetAllData\022\026.google.protobu"
    "f.Empty\032\032.extractor.AllDataResponseb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_extractor_2eproto_deps[1] = {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_extractor_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_extractor_2eproto = {
    false,
    false,
    923,
    descriptor_table_protodef_extractor_2eproto,
    "extractor.proto",
    &descriptor_table_extractor_2eproto_once,
    descriptor_table_extractor_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_extractor_2eproto::offsets,
    file_level_enum_descriptors_extractor_2eproto,
    file_level_service_descriptors_extractor_2eproto,
};
namespace extractor {
// ===================================================================

class FlightRow::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FlightRow>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FlightRow, _impl_._has_bits_);
};

FlightRow::FlightRow(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FlightRow_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:extractor.FlightRow)
}
PROTOBUF_NDEBUG_INLINE FlightRow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::extractor::FlightRow& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        cidade_origem_(arena, from.cidade_origem_),
        cidade_destino_(arena, from.cidade_destino_) {}

FlightRow::FlightRow(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const FlightRow& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FlightRow_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FlightRow* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, assentos_ocupados_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, assentos_ocupados_),
           offsetof(Impl_, ano_) -
               offsetof(Impl_, assentos_ocupados_) +
               sizeof(Impl_::ano_));

  // @@protoc_insertion_point(copy_constructor:extractor.FlightRow)
}
PROTOBUF_NDEBUG_INLINE FlightRow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        cidade_origem_(arena),
        cidade_destino_(arena) {}

inline void FlightRow::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, assentos_ocupados_),
           0,
           offsetof(Impl_, ano_) -
               offsetof(Impl_, assentos_ocupados_) +
               sizeof(Impl_::ano_));
}
FlightRow::~FlightRow() {
  // @@protoc_insertion_point(destructor:extractor.FlightRow)
  SharedDtor(*this);
}
inline void FlightRow::SharedDtor(MessageLite& self) {
  FlightRow& this_ = static_cast<FlightRow&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.cidade_origem_.Destroy();
  this_._impl_.cidade_destino_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FlightRow::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FlightRow(arena);
}
constexpr auto FlightRow::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FlightRow),
                                            alignof(FlightRow));
}
constexpr auto FlightRow::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FlightRow_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &FlightRow::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FlightRow>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FlightRow::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FlightRow>(), &FlightRow::ByteSizeLong,
              &FlightRow::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FlightRow, _impl_._cached_size_),
          false,
      },
      &FlightRow::kDescriptorMethods,
      &descriptor_table_extractor_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        FlightRow_class_data_ =
            FlightRow::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL FlightRow::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FlightRow_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FlightRow_class_data_.tc_table);
  return FlightRow_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 63, 2>
FlightRow::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FlightRow, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    FlightRow_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::extractor::FlightRow>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 ano = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlightRow, _impl_.ano_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.ano_)}},
    // string cidade_origem = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.cidade_origem_)}},
    // string cidade_destino = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.cidade_destino_)}},
    // int32 assentos_ocupados = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlightRow, _impl_.assentos_ocupados_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_ocupados_)}},
    // int32 assentos_totais = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlightRow, _impl_.assentos_totais_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_totais_)}},
    // int32 assentos_disponiveis = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlightRow, _impl_.assentos_disponiveis_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_disponiveis_)}},
    // int32 dia = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlightRow, _impl_.dia_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.dia_)}},
    // int32 mes = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlightRow, _impl_.mes_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.mes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string cidade_origem = 1;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.cidade_origem_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cidade_destino = 2;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.cidade_destino_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 assentos_ocupados = 3;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_ocupados_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 assentos_totais = 4;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_totais_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 assentos_disponiveis = 5;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_disponiveis_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 dia = 6;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.dia_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 mes = 7;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.mes_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 ano = 8;
    {PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.ano_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\23\15\16\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "extractor.FlightRow"
    "cidade_origem"
    "cidade_destino"
  }},
};
PROTOBUF_NOINLINE void FlightRow::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.FlightRow)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.cidade_origem_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.cidade_destino_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.assentos_ocupados_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ano_) -
        reinterpret_cast<char*>(&_impl_.assentos_ocupados_)) + sizeof(_impl_.ano_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL FlightRow::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FlightRow& this_ = static_cast<const FlightRow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FlightRow::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FlightRow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:extractor.FlightRow)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string cidade_origem = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_cidade_origem().empty()) {
      const std::string& _s = this_._internal_cidade_origem();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.FlightRow.cidade_origem");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string cidade_destino = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_cidade_destino().empty()) {
      const std::string& _s = this_._internal_cidade_destino();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.FlightRow.cidade_destino");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 assentos_ocupados = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_assentos_ocupados() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_assentos_ocupados(), target);
    }
  }

  // int32 assentos_totais = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_assentos_totais() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_assentos_totais(), target);
    }
  }

  // int32 assentos_disponiveis = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_assentos_disponiveis() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_assentos_disponiveis(), target);
    }
  }

  // int32 dia = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_dia() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
              stream, this_._internal_dia(), target);
    }
  }

  // int32 mes = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_mes() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_mes(), target);
    }
  }

  // int32 ano = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_ano() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
              stream, this_._internal_ano(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.FlightRow)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FlightRow::ByteSizeLong(const MessageLite& base) {
  const FlightRow& this_ = static_cast<const FlightRow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t FlightRow::ByteSizeLong() const {
  const FlightRow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:extractor.FlightRow)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string cidade_origem = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_cidade_origem().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cidade_origem());
      }
    }
    // string cidade_destino = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_cidade_destino().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cidade_destino());
      }
    }
    // int32 assentos_ocupados = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_assentos_ocupados() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_assentos_ocupados());
      }
    }
    // int32 assentos_totais = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_assentos_totais() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_assentos_totais());
      }
    }
    // int32 assentos_disponiveis = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_assentos_disponiveis() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_assentos_disponiveis());
      }
    }
    // int32 dia = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_dia() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_dia());
      }
    }
    // int32 mes = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_mes() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_mes());
      }
    }
    // int32 ano = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_ano() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ano());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void FlightRow::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FlightRow*>(&to_msg);
  auto& from = static_cast<const FlightRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.FlightRow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_cidade_origem().empty()) {
        _this->_internal_set_cidade_origem(from._internal_cidade_origem());
      } else {
        if (_this->_impl_.cidade_origem_.IsDefault()) {
          _this->_internal_set_cidade_origem("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_cidade_destino().empty()) {
        _this->_internal_set_cidade_destino(from._internal_cidade_destino());
      } else {
        if (_this->_impl_.cidade_destino_.IsDefault()) {
          _this->_internal_set_cidade_destino("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_assentos_ocupados() != 0) {
        _this->_impl_.assentos_ocupados_ = from._impl_.assentos_ocupados_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_assentos_totais() != 0) {
        _this->_impl_.assentos_totais_ = from._impl_.assentos_totais_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_assentos_disponiveis() != 0) {
        _this->_impl_.assentos_disponiveis_ = from._impl_.assentos_disponiveis_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_dia() != 0) {
        _this->_impl_.dia_ = from._impl_.dia_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_mes() != 0) {
        _this->_impl_.mes_ = from._impl_.mes_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_ano() != 0) {
        _this->_impl_.ano_ = from._impl_.ano_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FlightRow::CopyFrom(const FlightRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.FlightRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FlightRow::InternalSwap(FlightRow* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cidade_origem_, &other->_impl_.cidade_origem_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cidade_destino_, &other->_impl_.cidade_destino_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.ano_)
      + sizeof(FlightRow::_impl_.ano_)
      - PROTOBUF_FIELD_OFFSET(FlightRow, _impl_.assentos_ocupados_)>(
          reinterpret_cast<char*>(&_impl_.assentos_ocupados_),
          reinterpret_cast<char*>(&other->_impl_.assentos_ocupados_));
}

::google::protobuf::Metadata FlightRow::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReservaRow::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReservaRow>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_._has_bits_);
};

ReservaRow::ReservaRow(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReservaRow_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:extractor.ReservaRow)
}
PROTOBUF_NDEBUG_INLINE ReservaRow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::extractor::ReservaRow& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tipo_quarto_(arena, from.tipo_quarto_),
        nome_hotel_(arena, from.nome_hotel_),
        cidade_destino_(arena, from.cidade_destino_) {}

ReservaRow::ReservaRow(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ReservaRow& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReservaRow_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReservaRow* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, numero_quarto_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, numero_quarto_),
           offsetof(Impl_, data_ida_ano_) -
               offsetof(Impl_, numero_quarto_) +
               sizeof(Impl_::data_ida_ano_));

  // @@protoc_insertion_point(copy_constructor:extractor.ReservaRow)
}
PROTOBUF_NDEBUG_INLINE ReservaRow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        tipo_quarto_(arena),
        nome_hotel_(arena),
        cidade_destino_(arena) {}

inline void ReservaRow::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, numero_quarto_),
           0,
           offsetof(Impl_, data_ida_ano_) -
               offsetof(Impl_, numero_quarto_) +
               sizeof(Impl_::data_ida_ano_));
}
ReservaRow::~ReservaRow() {
  // @@protoc_insertion_point(destructor:extractor.ReservaRow)
  SharedDtor(*this);
}
inline void ReservaRow::SharedDtor(MessageLite& self) {
  ReservaRow& this_ = static_cast<ReservaRow&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.tipo_quarto_.Destroy();
  this_._impl_.nome_hotel_.Destroy();
  this_._impl_.cidade_destino_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReservaRow::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReservaRow(arena);
}
constexpr auto ReservaRow::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReservaRow),
                                            alignof(ReservaRow));
}
constexpr auto ReservaRow::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReservaRow_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReservaRow::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReservaRow>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReservaRow::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReservaRow>(), &ReservaRow::ByteSizeLong,
              &ReservaRow::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_._cached_size_),
          false,
      },
      &ReservaRow::kDescriptorMethods,
      &descriptor_table_extractor_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ReservaRow_class_data_ =
            ReservaRow::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReservaRow::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReservaRow_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReservaRow_class_data_.tc_table);
  return ReservaRow_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 72, 2>
ReservaRow::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ReservaRow_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::extractor::ReservaRow>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string tipo_quarto = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.tipo_quarto_)}},
    // string nome_hotel = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.nome_hotel_)}},
    // string cidade_destino = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.cidade_destino_)}},
    // int32 numero_quarto = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReservaRow, _impl_.numero_quarto_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.numero_quarto_)}},
    // int32 quantidade_pessoas = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReservaRow, _impl_.quantidade_pessoas_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.quantidade_pessoas_)}},
    // float preco = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.preco_)}},
    // bool ocupado = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ReservaRow, _impl_.ocupado_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.ocupado_)}},
    // int32 data_ida_dia = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReservaRow, _impl_.data_ida_dia_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_dia_)}},
    // int32 data_ida_mes = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReservaRow, _impl_.data_ida_mes_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_mes_)}},
    // int32 data_ida_ano = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReservaRow, _impl_.data_ida_ano_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_ano_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string tipo_quarto = 1;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.tipo_quarto_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nome_hotel = 2;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.nome_hotel_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cidade_destino = 3;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.cidade_destino_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 numero_quarto = 4;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.numero_quarto_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 quantidade_pessoas = 5;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.quantidade_pessoas_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // float preco = 6;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.preco_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // bool ocupado = 7;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.ocupado_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 data_ida_dia = 8;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_dia_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 data_ida_mes = 9;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_mes_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 data_ida_ano = 10;
    {PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_ano_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\24\13\12\16\0\0\0\0\0\0\0\0\0\0\0\0"
    "extractor.ReservaRow"
    "tipo_quarto"
    "nome_hotel"
    "cidade_destino"
  }},
};
PROTOBUF_NOINLINE void ReservaRow::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.ReservaRow)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.tipo_quarto_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.nome_hotel_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.cidade_destino_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.numero_quarto_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.data_ida_dia_) -
        reinterpret_cast<char*>(&_impl_.numero_quarto_)) + sizeof(_impl_.data_ida_dia_));
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    ::memset(&_impl_.data_ida_mes_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.data_ida_ano_) -
        reinterpret_cast<char*>(&_impl_.data_ida_mes_)) + sizeof(_impl_.data_ida_ano_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReservaRow::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReservaRow& this_ = static_cast<const ReservaRow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReservaRow::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReservaRow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:extractor.ReservaRow)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tipo_quarto = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_tipo_quarto().empty()) {
      const std::string& _s = this_._internal_tipo_quarto();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.ReservaRow.tipo_quarto");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string nome_hotel = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_nome_hotel().empty()) {
      const std::string& _s = this_._internal_nome_hotel();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.ReservaRow.nome_hotel");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string cidade_destino = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_cidade_destino().empty()) {
      const std::string& _s = this_._internal_cidade_destino();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.ReservaRow.cidade_destino");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // int32 numero_quarto = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_numero_quarto() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_numero_quarto(), target);
    }
  }

  // int32 quantidade_pessoas = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_quantidade_pessoas() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_quantidade_pessoas(), target);
    }
  }

  // float preco = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_preco()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          6, this_._internal_preco(), target);
    }
  }

  // bool ocupado = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_ocupado() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_ocupado(), target);
    }
  }

  // int32 data_ida_dia = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_data_ida_dia() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
              stream, this_._internal_data_ida_dia(), target);
    }
  }

  // int32 data_ida_mes = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_data_ida_mes() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
              stream, this_._internal_data_ida_mes(), target);
    }
  }

  // int32 data_ida_ano = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_data_ida_ano() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
              stream, this_._internal_data_ida_ano(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.ReservaRow)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReservaRow::ByteSizeLong(const MessageLite& base) {
  const ReservaRow& this_ = static_cast<const ReservaRow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReservaRow::ByteSizeLong() const {
  const ReservaRow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:extractor.ReservaRow)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string tipo_quarto = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_tipo_quarto().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_tipo_quarto());
      }
    }
    // string nome_hotel = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_nome_hotel().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_nome_hotel());
      }
    }
    // string cidade_destino = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_cidade_destino().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cidade_destino());
      }
    }
    // int32 numero_quarto = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_numero_quarto() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_numero_quarto());
      }
    }
    // int32 quantidade_pessoas = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_quantidade_pessoas() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_quantidade_pessoas());
      }
    }
    // float preco = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_preco()) != 0) {
        total_size += 5;
      }
    }
    // bool ocupado = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_ocupado() != 0) {
        total_size += 2;
      }
    }
    // int32 data_ida_dia = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_data_ida_dia() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_ida_dia());
      }
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // int32 data_ida_mes = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_data_ida_mes() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_ida_mes());
      }
    }
    // int32 data_ida_ano = 10;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_data_ida_ano() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_ida_ano());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReservaRow::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReservaRow*>(&to_msg);
  auto& from = static_cast<const ReservaRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.ReservaRow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_tipo_quarto().empty()) {
        _this->_internal_set_tipo_quarto(from._internal_tipo_quarto());
      } else {
        if (_this->_impl_.tipo_quarto_.IsDefault()) {
          _this->_internal_set_tipo_quarto("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_nome_hotel().empty()) {
        _this->_internal_set_nome_hotel(from._internal_nome_hotel());
      } else {
        if (_this->_impl_.nome_hotel_.IsDefault()) {
          _this->_internal_set_nome_hotel("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_cidade_destino().empty()) {
        _this->_internal_set_cidade_destino(from._internal_cidade_destino());
      } else {
        if (_this->_impl_.cidade_destino_.IsDefault()) {
          _this->_internal_set_cidade_destino("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_numero_quarto() != 0) {
        _this->_impl_.numero_quarto_ = from._impl_.numero_quarto_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_quantidade_pessoas() != 0) {
        _this->_impl_.quantidade_pessoas_ = from._impl_.quantidade_pessoas_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_preco()) != 0) {
        _this->_impl_.preco_ = from._impl_.preco_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_ocupado() != 0) {
        _this->_impl_.ocupado_ = from._impl_.ocupado_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_data_ida_dia() != 0) {
        _this->_impl_.data_ida_dia_ = from._impl_.data_ida_dia_;
      }
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_data_ida_mes() != 0) {
        _this->_impl_.data_ida_mes_ = from._impl_.data_ida_mes_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_data_ida_ano() != 0) {
        _this->_impl_.data_ida_ano_ = from._impl_.data_ida_ano_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReservaRow::CopyFrom(const ReservaRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.ReservaRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReservaRow::InternalSwap(ReservaRow* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tipo_quarto_, &other->_impl_.tipo_quarto_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nome_hotel_, &other->_impl_.nome_hotel_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cidade_destino_, &other->_impl_.cidade_destino_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.data_ida_ano_)
      + sizeof(ReservaRow::_impl_.data_ida_ano_)
      - PROTOBUF_FIELD_OFFSET(ReservaRow, _impl_.numero_quarto_)>(
          reinterpret_cast<char*>(&_impl_.numero_quarto_),
          reinterpret_cast<char*>(&other->_impl_.numero_quarto_));
}

::google::protobuf::Metadata ReservaRow::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PesquisaRow::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PesquisaRow>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_._has_bits_);
};

PesquisaRow::PesquisaRow(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PesquisaRow_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:extractor.PesquisaRow)
}
PROTOBUF_NDEBUG_INLINE PesquisaRow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::extractor::PesquisaRow& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        cidade_origem_(arena, from.cidade_origem_),
        cidade_destino_(arena, from.cidade_destino_),
        nome_hotel_(arena, from.nome_hotel_) {}

PesquisaRow::PesquisaRow(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const PesquisaRow& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PesquisaRow_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PesquisaRow* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_ida_dia_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, data_ida_dia_),
           offsetof(Impl_, data_volta_ano_) -
               offsetof(Impl_, data_ida_dia_) +
               sizeof(Impl_::data_volta_ano_));

  // @@protoc_insertion_point(copy_constructor:extractor.PesquisaRow)
}
PROTOBUF_NDEBUG_INLINE PesquisaRow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        cidade_origem_(arena),
        cidade_destino_(arena),
        nome_hotel_(arena) {}

inline void PesquisaRow::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_ida_dia_),
           0,
           offsetof(Impl_, data_volta_ano_) -
               offsetof(Impl_, data_ida_dia_) +
               sizeof(Impl_::data_volta_ano_));
}
PesquisaRow::~PesquisaRow() {
  // @@protoc_insertion_point(destructor:extractor.PesquisaRow)
  SharedDtor(*this);
}
inline void PesquisaRow::SharedDtor(MessageLite& self) {
  PesquisaRow& this_ = static_cast<PesquisaRow&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.cidade_origem_.Destroy();
  this_._impl_.cidade_destino_.Destroy();
  this_._impl_.nome_hotel_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PesquisaRow::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PesquisaRow(arena);
}
constexpr auto PesquisaRow::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PesquisaRow),
                                            alignof(PesquisaRow));
}
constexpr auto PesquisaRow::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PesquisaRow_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &PesquisaRow::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PesquisaRow>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PesquisaRow::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PesquisaRow>(), &PesquisaRow::ByteSizeLong,
              &PesquisaRow::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_._cached_size_),
          false,
      },
      &PesquisaRow::kDescriptorMethods,
      &descriptor_table_extractor_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        PesquisaRow_class_data_ =
            PesquisaRow::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL PesquisaRow::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PesquisaRow_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PesquisaRow_class_data_.tc_table);
  return PesquisaRow_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 75, 2>
PesquisaRow::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    PesquisaRow_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::extractor::PesquisaRow>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string cidade_origem = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.cidade_origem_)}},
    // string cidade_destino = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.cidade_destino_)}},
    // string nome_hotel = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.nome_hotel_)}},
    // int32 data_ida_dia = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PesquisaRow, _impl_.data_ida_dia_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_dia_)}},
    // int32 data_ida_mes = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PesquisaRow, _impl_.data_ida_mes_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_mes_)}},
    // int32 data_ida_ano = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PesquisaRow, _impl_.data_ida_ano_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_ano_)}},
    // int32 data_volta_dia = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PesquisaRow, _impl_.data_volta_dia_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_dia_)}},
    // int32 data_volta_mes = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PesquisaRow, _impl_.data_volta_mes_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_mes_)}},
    // int32 data_volta_ano = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PesquisaRow, _impl_.data_volta_ano_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_ano_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string cidade_origem = 1;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.cidade_origem_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cidade_destino = 2;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.cidade_destino_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nome_hotel = 3;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.nome_hotel_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 data_ida_dia = 4;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_dia_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 data_ida_mes = 5;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_mes_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 data_ida_ano = 6;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_ano_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 data_volta_dia = 7;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_dia_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 data_volta_mes = 8;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_mes_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 data_volta_ano = 9;
    {PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_ano_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\25\15\16\12\0\0\0\0\0\0\0\0\0\0\0\0"
    "extractor.PesquisaRow"
    "cidade_origem"
    "cidade_destino"
    "nome_hotel"
  }},
};
PROTOBUF_NOINLINE void PesquisaRow::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.PesquisaRow)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.cidade_origem_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.cidade_destino_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.nome_hotel_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.data_ida_dia_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.data_volta_mes_) -
        reinterpret_cast<char*>(&_impl_.data_ida_dia_)) + sizeof(_impl_.data_volta_mes_));
  }
  _impl_.data_volta_ano_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PesquisaRow::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PesquisaRow& this_ = static_cast<const PesquisaRow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PesquisaRow::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PesquisaRow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:extractor.PesquisaRow)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string cidade_origem = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_cidade_origem().empty()) {
      const std::string& _s = this_._internal_cidade_origem();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.PesquisaRow.cidade_origem");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string cidade_destino = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_cidade_destino().empty()) {
      const std::string& _s = this_._internal_cidade_destino();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.PesquisaRow.cidade_destino");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string nome_hotel = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_nome_hotel().empty()) {
      const std::string& _s = this_._internal_nome_hotel();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "extractor.PesquisaRow.nome_hotel");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // int32 data_ida_dia = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_data_ida_dia() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_data_ida_dia(), target);
    }
  }

  // int32 data_ida_mes = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_data_ida_mes() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_data_ida_mes(), target);
    }
  }

  // int32 data_ida_ano = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_data_ida_ano() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
              stream, this_._internal_data_ida_ano(), target);
    }
  }

  // int32 data_volta_dia = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_data_volta_dia() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_data_volta_dia(), target);
    }
  }

  // int32 data_volta_mes = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_data_volta_mes() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
              stream, this_._internal_data_volta_mes(), target);
    }
  }

  // int32 data_volta_ano = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_data_volta_ano() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
              stream, this_._internal_data_volta_ano(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.PesquisaRow)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PesquisaRow::ByteSizeLong(const MessageLite& base) {
  const PesquisaRow& this_ = static_cast<const PesquisaRow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t PesquisaRow::ByteSizeLong() const {
  const PesquisaRow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:extractor.PesquisaRow)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string cidade_origem = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_cidade_origem().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cidade_origem());
      }
    }
    // string cidade_destino = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_cidade_destino().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cidade_destino());
      }
    }
    // string nome_hotel = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_nome_hotel().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_nome_hotel());
      }
    }
    // int32 data_ida_dia = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_data_ida_dia() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_ida_dia());
      }
    }
    // int32 data_ida_mes = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_data_ida_mes() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_ida_mes());
      }
    }
    // int32 data_ida_ano = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_data_ida_ano() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_ida_ano());
      }
    }
    // int32 data_volta_dia = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_data_volta_dia() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_volta_dia());
      }
    }
    // int32 data_volta_mes = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_data_volta_mes() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_volta_mes());
      }
    }
  }
   {
    // int32 data_volta_ano = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_data_volta_ano() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_data_volta_ano());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void PesquisaRow::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PesquisaRow*>(&to_msg);
  auto& from = static_cast<const PesquisaRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.PesquisaRow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_cidade_origem().empty()) {
        _this->_internal_set_cidade_origem(from._internal_cidade_origem());
      } else {
        if (_this->_impl_.cidade_origem_.IsDefault()) {
          _this->_internal_set_cidade_origem("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_cidade_destino().empty()) {
        _this->_internal_set_cidade_destino(from._internal_cidade_destino());
      } else {
        if (_this->_impl_.cidade_destino_.IsDefault()) {
          _this->_internal_set_cidade_destino("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_nome_hotel().empty()) {
        _this->_internal_set_nome_hotel(from._internal_nome_hotel());
      } else {
        if (_this->_impl_.nome_hotel_.IsDefault()) {
          _this->_internal_set_nome_hotel("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_data_ida_dia() != 0) {
        _this->_impl_.data_ida_dia_ = from._impl_.data_ida_dia_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_data_ida_mes() != 0) {
        _this->_impl_.data_ida_mes_ = from._impl_.data_ida_mes_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_data_ida_ano() != 0) {
        _this->_impl_.data_ida_ano_ = from._impl_.data_ida_ano_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_data_volta_dia() != 0) {
        _this->_impl_.data_volta_dia_ = from._impl_.data_volta_dia_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_data_volta_mes() != 0) {
        _this->_impl_.data_volta_mes_ = from._impl_.data_volta_mes_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (from._internal_data_volta_ano() != 0) {
      _this->_impl_.data_volta_ano_ = from._impl_.data_volta_ano_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PesquisaRow::CopyFrom(const PesquisaRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.PesquisaRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PesquisaRow::InternalSwap(PesquisaRow* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cidade_origem_, &other->_impl_.cidade_origem_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cidade_destino_, &other->_impl_.cidade_destino_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nome_hotel_, &other->_impl_.nome_hotel_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_volta_ano_)
      + sizeof(PesquisaRow::_impl_.data_volta_ano_)
      - PROTOBUF_FIELD_OFFSET(PesquisaRow, _impl_.data_ida_dia_)>(
          reinterpret_cast<char*>(&_impl_.data_ida_dia_),
          reinterpret_cast<char*>(&other->_impl_.data_ida_dia_));
}

::google::protobuf::Metadata PesquisaRow::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AllDataResponse::_Internal {
 public:
};

AllDataResponse::AllDataResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AllDataResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:extractor.AllDataResponse)
}
PROTOBUF_NDEBUG_INLINE AllDataResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::extractor::AllDataResponse& from_msg)
      : voos_{visibility, arena, from.voos_},
        reservas_{visibility, arena, from.reservas_},
        pesquisas_{visibility, arena, from.pesquisas_},
        _cached_size_{0} {}

AllDataResponse::AllDataResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AllDataResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AllDataResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AllDataResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:extractor.AllDataResponse)
}
PROTOBUF_NDEBUG_INLINE AllDataResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : voos_{visibility, arena},
        reservas_{visibility, arena},
        pesquisas_{visibility, arena},
        _cached_size_{0} {}

inline void AllDataResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AllDataResponse::~AllDataResponse() {
  // @@protoc_insertion_point(destructor:extractor.AllDataResponse)
  SharedDtor(*this);
}
inline void AllDataResponse::SharedDtor(MessageLite& self) {
  AllDataResponse& this_ = static_cast<AllDataResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AllDataResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AllDataResponse(arena);
}
constexpr auto AllDataResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.voos_) +
          decltype(AllDataResponse::_impl_.voos_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.reservas_) +
          decltype(AllDataResponse::_impl_.reservas_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.pesquisas_) +
          decltype(AllDataResponse::_impl_.pesquisas_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AllDataResponse), alignof(AllDataResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AllDataResponse::PlacementNew_,
                                 sizeof(AllDataResponse),
                                 alignof(AllDataResponse));
  }
}
constexpr auto AllDataResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AllDataResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AllDataResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AllDataResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AllDataResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AllDataResponse>(), &AllDataResponse::ByteSizeLong,
              &AllDataResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_._cached_size_),
          false,
      },
      &AllDataResponse::kDescriptorMethods,
      &descriptor_table_extractor_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        AllDataResponse_class_data_ =
            AllDataResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL AllDataResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AllDataResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AllDataResponse_class_data_.tc_table);
  return AllDataResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
AllDataResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AllDataResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::extractor::AllDataResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .extractor.FlightRow voos = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.voos_)}},
    // repeated .extractor.ReservaRow reservas = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.reservas_)}},
    // repeated .extractor.PesquisaRow pesquisas = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.pesquisas_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .extractor.FlightRow voos = 1;
    {PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.voos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .extractor.ReservaRow reservas = 2;
    {PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.reservas_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .extractor.PesquisaRow pesquisas = 3;
    {PROTOBUF_FIELD_OFFSET(AllDataResponse, _impl_.pesquisas_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::extractor::FlightRow>()},
      {::_pbi::TcParser::GetTable<::extractor::ReservaRow>()},
      {::_pbi::TcParser::GetTable<::extractor::PesquisaRow>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AllDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:extractor.AllDataResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voos_.Clear();
  _impl_.reservas_.Clear();
  _impl_.pesquisas_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AllDataResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AllDataResponse& this_ = static_cast<const AllDataResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AllDataResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AllDataResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:extractor.AllDataResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .extractor.FlightRow voos = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_voos_size());
       i < n; i++) {
    const auto& repfield = this_._internal_voos().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .extractor.ReservaRow reservas = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_reservas_size());
       i < n; i++) {
    const auto& repfield = this_._internal_reservas().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .extractor.PesquisaRow pesquisas = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_pesquisas_size());
       i < n; i++) {
    const auto& repfield = this_._internal_pesquisas().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extractor.AllDataResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AllDataResponse::ByteSizeLong(const MessageLite& base) {
  const AllDataResponse& this_ = static_cast<const AllDataResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AllDataResponse::ByteSizeLong() const {
  const AllDataResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:extractor.AllDataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .extractor.FlightRow voos = 1;
    {
      total_size += 1UL * this_._internal_voos_size();
      for (const auto& msg : this_._internal_voos()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .extractor.ReservaRow reservas = 2;
    {
      total_size += 1UL * this_._internal_reservas_size();
      for (const auto& msg : this_._internal_reservas()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .extractor.PesquisaRow pesquisas = 3;
    {
      total_size += 1UL * this_._internal_pesquisas_size();
      for (const auto& msg : this_._internal_pesquisas()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AllDataResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AllDataResponse*>(&to_msg);
  auto& from = static_cast<const AllDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:extractor.AllDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_voos()->MergeFrom(
      from._internal_voos());
  _this->_internal_mutable_reservas()->MergeFrom(
      from._internal_reservas());
  _this->_internal_mutable_pesquisas()->MergeFrom(
      from._internal_pesquisas());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllDataResponse::CopyFrom(const AllDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extractor.AllDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AllDataResponse::InternalSwap(AllDataResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.voos_.InternalSwap(&other->_impl_.voos_);
  _impl_.reservas_.InternalSwap(&other->_impl_.reservas_);
  _impl_.pesquisas_.InternalSwap(&other->_impl_.pesquisas_);
}

::google::protobuf::Metadata AllDataResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace extractor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_extractor_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
