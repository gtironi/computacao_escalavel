// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mock_server/proto/extractor.proto
#ifndef GRPC_mock_5fserver_2fproto_2fextractor_2eproto__INCLUDED
#define GRPC_mock_5fserver_2fproto_2fextractor_2eproto__INCLUDED

#include "mock_server/proto/extractor.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace extractor {

// ---------- SERVICE ----------
class ExtractorService final {
 public:
  static constexpr char const* service_full_name() {
    return "extractor.ExtractorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetFlightData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::extractor::FlightDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::FlightDataResponse>> AsyncGetFlightData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::FlightDataResponse>>(AsyncGetFlightDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::FlightDataResponse>> PrepareAsyncGetFlightData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::FlightDataResponse>>(PrepareAsyncGetFlightDataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetReservaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::extractor::ReservaDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::ReservaDataResponse>> AsyncGetReservaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::ReservaDataResponse>>(AsyncGetReservaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::ReservaDataResponse>> PrepareAsyncGetReservaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::ReservaDataResponse>>(PrepareAsyncGetReservaDataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::extractor::PesquisaDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::PesquisaDataResponse>> AsyncGetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::PesquisaDataResponse>>(AsyncGetPesquisaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::PesquisaDataResponse>> PrepareAsyncGetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::extractor::PesquisaDataResponse>>(PrepareAsyncGetPesquisaDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetFlightData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::FlightDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFlightData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::FlightDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetReservaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::ReservaDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetReservaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::ReservaDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::PesquisaDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::PesquisaDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::extractor::FlightDataResponse>* AsyncGetFlightDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::extractor::FlightDataResponse>* PrepareAsyncGetFlightDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::extractor::ReservaDataResponse>* AsyncGetReservaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::extractor::ReservaDataResponse>* PrepareAsyncGetReservaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::extractor::PesquisaDataResponse>* AsyncGetPesquisaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::extractor::PesquisaDataResponse>* PrepareAsyncGetPesquisaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetFlightData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::extractor::FlightDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::FlightDataResponse>> AsyncGetFlightData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::FlightDataResponse>>(AsyncGetFlightDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::FlightDataResponse>> PrepareAsyncGetFlightData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::FlightDataResponse>>(PrepareAsyncGetFlightDataRaw(context, request, cq));
    }
    ::grpc::Status GetReservaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::extractor::ReservaDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::ReservaDataResponse>> AsyncGetReservaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::ReservaDataResponse>>(AsyncGetReservaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::ReservaDataResponse>> PrepareAsyncGetReservaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::ReservaDataResponse>>(PrepareAsyncGetReservaDataRaw(context, request, cq));
    }
    ::grpc::Status GetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::extractor::PesquisaDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::PesquisaDataResponse>> AsyncGetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::PesquisaDataResponse>>(AsyncGetPesquisaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::PesquisaDataResponse>> PrepareAsyncGetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::extractor::PesquisaDataResponse>>(PrepareAsyncGetPesquisaDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetFlightData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::FlightDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFlightData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::FlightDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetReservaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::ReservaDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetReservaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::ReservaDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::PesquisaDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPesquisaData(::grpc::ClientContext* context, const ::extractor::Empty* request, ::extractor::PesquisaDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::extractor::FlightDataResponse>* AsyncGetFlightDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::extractor::FlightDataResponse>* PrepareAsyncGetFlightDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::extractor::ReservaDataResponse>* AsyncGetReservaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::extractor::ReservaDataResponse>* PrepareAsyncGetReservaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::extractor::PesquisaDataResponse>* AsyncGetPesquisaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::extractor::PesquisaDataResponse>* PrepareAsyncGetPesquisaDataRaw(::grpc::ClientContext* context, const ::extractor::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFlightData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReservaData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPesquisaData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetFlightData(::grpc::ServerContext* context, const ::extractor::Empty* request, ::extractor::FlightDataResponse* response);
    virtual ::grpc::Status GetReservaData(::grpc::ServerContext* context, const ::extractor::Empty* request, ::extractor::ReservaDataResponse* response);
    virtual ::grpc::Status GetPesquisaData(::grpc::ServerContext* context, const ::extractor::Empty* request, ::extractor::PesquisaDataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFlightData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFlightData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFlightData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlightData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::FlightDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlightData(::grpc::ServerContext* context, ::extractor::Empty* request, ::grpc::ServerAsyncResponseWriter< ::extractor::FlightDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReservaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReservaData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetReservaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReservaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::ReservaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReservaData(::grpc::ServerContext* context, ::extractor::Empty* request, ::grpc::ServerAsyncResponseWriter< ::extractor::ReservaDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPesquisaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPesquisaData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPesquisaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPesquisaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::PesquisaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPesquisaData(::grpc::ServerContext* context, ::extractor::Empty* request, ::grpc::ServerAsyncResponseWriter< ::extractor::PesquisaDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFlightData<WithAsyncMethod_GetReservaData<WithAsyncMethod_GetPesquisaData<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetFlightData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFlightData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::extractor::Empty, ::extractor::FlightDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::extractor::Empty* request, ::extractor::FlightDataResponse* response) { return this->GetFlightData(context, request, response); }));}
    void SetMessageAllocatorFor_GetFlightData(
        ::grpc::MessageAllocator< ::extractor::Empty, ::extractor::FlightDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::extractor::Empty, ::extractor::FlightDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFlightData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlightData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::FlightDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFlightData(
      ::grpc::CallbackServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::FlightDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetReservaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetReservaData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::extractor::Empty, ::extractor::ReservaDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::extractor::Empty* request, ::extractor::ReservaDataResponse* response) { return this->GetReservaData(context, request, response); }));}
    void SetMessageAllocatorFor_GetReservaData(
        ::grpc::MessageAllocator< ::extractor::Empty, ::extractor::ReservaDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::extractor::Empty, ::extractor::ReservaDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetReservaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReservaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::ReservaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetReservaData(
      ::grpc::CallbackServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::ReservaDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPesquisaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPesquisaData() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::extractor::Empty, ::extractor::PesquisaDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::extractor::Empty* request, ::extractor::PesquisaDataResponse* response) { return this->GetPesquisaData(context, request, response); }));}
    void SetMessageAllocatorFor_GetPesquisaData(
        ::grpc::MessageAllocator< ::extractor::Empty, ::extractor::PesquisaDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::extractor::Empty, ::extractor::PesquisaDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPesquisaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPesquisaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::PesquisaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPesquisaData(
      ::grpc::CallbackServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::PesquisaDataResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetFlightData<WithCallbackMethod_GetReservaData<WithCallbackMethod_GetPesquisaData<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetFlightData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFlightData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFlightData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlightData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::FlightDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReservaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReservaData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetReservaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReservaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::ReservaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPesquisaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPesquisaData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPesquisaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPesquisaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::PesquisaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFlightData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFlightData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetFlightData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlightData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::FlightDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlightData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReservaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReservaData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetReservaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReservaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::ReservaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReservaData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPesquisaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPesquisaData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPesquisaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPesquisaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::PesquisaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPesquisaData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFlightData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFlightData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFlightData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFlightData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlightData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::FlightDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFlightData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetReservaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetReservaData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetReservaData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetReservaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReservaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::ReservaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetReservaData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPesquisaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPesquisaData() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPesquisaData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPesquisaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPesquisaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::PesquisaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPesquisaData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFlightData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFlightData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::extractor::Empty, ::extractor::FlightDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::extractor::Empty, ::extractor::FlightDataResponse>* streamer) {
                       return this->StreamedGetFlightData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFlightData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFlightData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::FlightDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFlightData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::extractor::Empty,::extractor::FlightDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetReservaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetReservaData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::extractor::Empty, ::extractor::ReservaDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::extractor::Empty, ::extractor::ReservaDataResponse>* streamer) {
                       return this->StreamedGetReservaData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetReservaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReservaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::ReservaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetReservaData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::extractor::Empty,::extractor::ReservaDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPesquisaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPesquisaData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::extractor::Empty, ::extractor::PesquisaDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::extractor::Empty, ::extractor::PesquisaDataResponse>* streamer) {
                       return this->StreamedGetPesquisaData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPesquisaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPesquisaData(::grpc::ServerContext* /*context*/, const ::extractor::Empty* /*request*/, ::extractor::PesquisaDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPesquisaData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::extractor::Empty,::extractor::PesquisaDataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFlightData<WithStreamedUnaryMethod_GetReservaData<WithStreamedUnaryMethod_GetPesquisaData<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFlightData<WithStreamedUnaryMethod_GetReservaData<WithStreamedUnaryMethod_GetPesquisaData<Service > > > StreamedService;
};

}  // namespace extractor


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_mock_5fserver_2fproto_2fextractor_2eproto__INCLUDED
